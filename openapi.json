{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Coda API",
    "description": "# Introduction\n\nThe Coda API is a RESTful API that lets you programmatically interact with Coda docs:\n\n * List and search Coda docs\n * Create new docs and copy existing ones\n * Share and publish docs\n * Discover pages, tables, formulas, and controls\n * Read, insert, upsert, update, and delete rows\n\nVersion 1 of the API will be supported until at least January 15, 2021.\nAs we update and release newer versions of the API, we reserve the right to remove\nolder APIs and functionality with a 3-month deprecation notice. We will post about such changes as well as announce\nnew features in the [Developers Central](https://community.coda.io/c/developers-central) section of our Community,\nand update the [API updates](https://coda.io/api-updates) doc.\n\n# Getting Started\n\nOur [Getting Started Guide](https://coda.io/t/Getting-Started-Guide-Coda-API_toujpmwflfy) helps you learn the\nbasic of working with the API and shows a few ways you can use it. Check it out, and learn how to:\n\n- Read data from Coda tables and write back to them\n- Build a one-way sync from one Coda doc to another\n- Automate reminders\n- Sync your Google Calendar to Coda\n\n# Using the API\n\nCoda's REST API is designed to be straightforward to use. You can use the language and platform of your choice to\nmake requests. To get a feel for the API, you can also use a tool like [Postman](https://www.getpostman.com/) or\n[Insomnia](https://insomnia.rest/).\n\n## API Endpoint\n\nThis API uses a base path of `https://coda.io/apis/v1`.\n\n## Resource IDs and Links\n\nEach resource instance retrieved via the API has the following fields:\n\n  - `id`: The resource's immutable ID, which can be used to refer to it within its context\n  - `type`: The type of resource, useful for identifying it in a heterogenous collection of results\n  - `href`: A fully qualified URI that can be used to refer to and get the latest details on the resource\n\nMost resources can be queried by their name or ID. We recommend sticking with IDs where possible, as names are\nfragile and prone to being changed by your doc's users.\n\n### List Endpoints\n\nEndpoints supporting listing of resources have the following fields:\n\n  - `items`: An array containing the listed resources, limited by the `limit` or `pageToken` query parameters\n  - `nextPageLink`: If more results are available, an API link to the next page of results\n  - `nextPageToken`: If more results are available, a page token that can be passed into the `pageToken` query parameter\n\n**The maximum page size may change at any time, and may be different for different endpoints.** Please do not rely on it\nfor any behavior of your application. If you pass a `limit` parameter that is larger than our maximum allowed limit,\nwe will only return as many results as our maximum limit. You should look for the presence of the `nextPageToken` on the\nresponse to see if there are more results available, rather than relying on a result set that matches your provided limit.\n\nTo fetch a subsequent page of results, pass the `pageToken` parameter. Set this parameter to the value given to you as the `nextPageToken`\nin a page response. If no value is provided, there are no more results available. You only need to pass the `pageToken` to get\nthe next page of results, you don't need to pass any of the parameters from your original request, as they are all\nimplied by the `pageToken`. Any other parameters provided alongside a `pageToken` will be ignored.\n\n### Doc IDs\n\nWhile most object IDs will have to be discovered via the API, you may find yourself frequently wanting to get the\nID of a specific Coda doc.\n\nHere's a handy tool that will extract it for you. (See if you can find the pattern!)\n\n<form>\n  <fieldset style=\"margin: 0px 25px 25px 25px; display: inline;\">\n    <legend>Doc ID Extractor</legend>\n    <input type=\"text\" id=\"de_docUrl\" placeholder=\"Paste in a Coda doc URL\"\n           style=\"width: 250px; padding: 8px; margin-right: 20px;\" />\n    <span>\n      Your doc ID is:&nbsp;&nbsp;&nbsp;\n      <input id=\"de_docId\" readonly=\"true\"\n             style=\"width: 150px; padding: 8px; font-family: monospace; border: 1px dashed gray;\" />\n  </fieldset>\n</form>\n\n<script>\n  (() => {\n    const docUrl = document.getElementById('de_docUrl');\n    const docId = document.getElementById('de_docId');\n    docUrl.addEventListener('input', () => {\n      docId.value = (docUrl.value.match(/_d([\\w-]+)/) || [])[1] || '';\n    });\n    docId.addEventListener('mousedown', () => docId.select());\n    docId.addEventListener('click', () => docId.select());\n  })();\n</script>\n\n## Rate Limiting\n\nThe Coda API sets a reasonable limit on the number of requests that can be made per minute. Once this limit is\nreached, calls to the API will start returning errors with an HTTP status code of 429. If you find yourself\nhitting rate limits and would like your individual rate to be raised, please contact us at <help+api@coda.io>.\n\n## Consistency\n\nWhile edits made in Coda are shared with other collaborators in real-time, it can take a few seconds for them to\nbecome available via the API. You may also notice that changes made via the API, such as updating a row, are not\nimmediate. These endpoints all return an HTTP 202 status code, instead of a standard 200, indicating that the\nedit has been accepted and queued for processing. This generally takes a few seconds, and the edit may fail if\ninvalid. Each such edit will return a `requestId` in the response, and you can pass this `requestId` to the\n[`#getMutationStatus`](#operation/getMutationStatus) endpoint to find out if it has been applied.\n\n## Volatile Formulas\n\nCoda exposes a number of \"volatile\" formulas, as as `Today()`, `Now()`, and `User()`. When used in a live Coda\ndoc, these formulas affect what's visible in realtime, tailored to the current user.\n\nSuch formulas behave differently with the API. Time-based values may only be current to the last edit made to the\ndoc. User-based values may be blank or invalid.\n\n## Free and Paid Workspaces\n\nWe make the Coda API available to all of our users free of charge, in both free and paid workspaces. However, API\nusage is subject to the role of the user associated with the API token in the workspace applicable to each API\nrequest. What this means is:\n\n- For the [`#createDoc`](#operation/createDoc) endpoint specifically, the owner of the API token must be a Doc\n  Maker (or Admin) in the workspace. If the \"Any member can create docs\" option in enabled in the workspace\n  settings, they can be an Editor and will get auto-promoted to Doc Maker upon using this endpoint. Lastly, if in\n  addition, the API key owner matches the \"Approved email domains\" setting, they will be auto-added to the\n  workspace and promoted to Doc Maker upon using this endpoint\n\nThis behavior applies to the API as well as any integrations that may use it, such as Zapier.\n\n## Examples\n\nTo help you get started, this documentation provides code examples in Python, Unix shell, and Google Apps Script.\nThese examples are based on a simple doc that looks something like this:\n\n![](https://cdn.coda.io/external/img/api_example_doc.png)\n\n### Python examples\n\nThese examples use Python 3.6+. If you don't already have the `requests` module, use `pip` or `easy_install` to\nget it.\n\n### Shell examples\n\nThe shell examples are intended to be run in a Unix shell. If you're on Windows, you will need to install\n[WSL](https://docs.microsoft.com/en-us/windows/wsl/install-win10).\n\nThese examples use the standard cURL utility to pull from the API, and then process it with `jq` to extract and\nformat example output. If you don't already have it, you can either [install it](https://stedolan.github.io/jq/)\nor run the command without it to see the raw JSON output.\n\n### Google Apps Script examples\n\n![](https://cdn.coda.io/external/img/api_gas.png)\n\n[Google Apps Script](https://script.google.com/) makes it easy to write code in a JavaScript-like syntax and\neasily access many Google products with built-in libraries. You can set up your scripts to run periodically,\nwhich makes it a good environment for writing tools without maintaining your own server.\n\nCoda provides a library for Google Apps Script. To use it, go into `Resources -> Libraries...` and enter the\nfollowing library ID: `15IQuWOk8MqT50FDWomh57UqWGH23gjsWVWYFms3ton6L-UHmefYHS9Vl`. If you want to see the\nlibrary's source code, it's available\n[here](https://script.google.com/d/15IQuWOk8MqT50FDWomh57UqWGH23gjsWVWYFms3ton6L-UHmefYHS9Vl/edit).\n\nGoogle provides autocomplete for API functions as well as generated docs. You can access these docs via the\nLibraries dialog by clicking on the library name. Required parameters that would be included in the URL path are\npositional arguments in each of these functions, followed by the request body, if applicable. All remaining\nparameters can be specified in the options object.\n\n## OpenAPI/Swagger Spec\n\nIn an effort to standardize our API and make it accessible, we offer an OpenAPI 3.0 specification:\n\n- [OpenAPI 3.0 spec - YAML](https://coda.io/apis/v1/openapi.yaml)\n- [OpenAPI 3.0 spec - JSON](https://coda.io/apis/v1/openapi.json)\n\n### Swagger 2.0\n\nWe also offer a downgraded Swagger 2.0 version of our specification. This may be useful for a number of tools\nthat haven't yet been adapted to OpenAPI 3.0. Here are the links:\n\n- [Swagger 2.0 spec - YAML](https://coda.io/apis/v1/swagger.yaml)\n- [Swagger 2.0 spec - JSON](https://coda.io/apis/v1/swagger.json)\n\n#### Postman collection\n\nTo get started with prototyping the API quickly in Postman, you can use one of links above to import the Coda API\ninto a collection. You'll then need to set the [appropriate header](#section/Authentication) and environment\nvariables.\n\n## Client libraries\n\nWe do not currently support client libraries apart from Google Apps Script. To work with the Coda API, you can\neither use standard network libraries for your language, or use the appropriate Swagger Generator tool to\nauto-generate Coda API client libraries for your language of choice. We do not provide any guarantees that these\nautogenerated libraries are compatible with our API (e.g., some libraries may not work with Bearer\nauthentication).\n\n### OpenAPI 3.0\n\n[Swagger Generator 3](https://generator3.swagger.io/) (that link takes you to the docs for the generator API) can\ngenerate client libraries for [these languages](https://generator3.swagger.io/v2/clients). It's relatively new\nand thus only has support for a limited set of languages at this time.\n\n### Swagger 2.0\n\n[Swagger Generator](https://generator.swagger.io/) takes in a legacy Swagger 2.0 specification, but can generate\nclient libraries for [more languages](http://generator.swagger.io/api/gen/clients). You can also use local\n[CLI tools](https://swagger.io/docs/open-source-tools/swagger-codegen/) to generate these libraries.\n\n### Third-party client libraries\n\nSome members of our amazing community have written libraries to work with our API. These aren't officially\nsupported by Coda, but are listed here for convenience. (Please let us know if you've written a library and would\nlike to have it included here.)\n\n- [PHP](https://github.com/danielstieber/CodaPHP) by Daniel Stieber\n- [Node-RED](https://github.com/serene-water/node-red-contrib-coda-io) by Mori Sugimoto\n- [NodeJS](https://www.npmjs.com/package/coda-js) by Parker McMullin\n- [Ruby](https://rubygems.org/gems/coda_docs/) by Carlos Muñoz at Monday.vc\n- [Python](https://github.com/Blasterai/codaio) by Mikhail Beliansky\n",
    "termsOfService": "https://coda.io/trust/tos",
    "contact": {
      "name": "API Support",
      "url": "https://coda.io",
      "email": "help+api@coda.io"
    },
    "x-logo": {
      "url": "https://cdn.coda.io/external/img/apilogo.png",
      "backgroundColor": "transparent",
      "altText": "Coda API"
    }
  },
  "servers": [{
    "url": "https://coda.io/apis/v1",
    "description": "Coda API (v1)"
  }],
  "tags": [{
    "name": "Account",
    "description": "At this time, the API exposes some limited information about your account. However, `/whoami` is a good endpoint to hit to verify that you're hitting the API correctly and that your token is working as expected.\n"
  }, {
    "name": "Columns",
    "description": "While columns in Coda have user-friendly names, they also have immutable IDs that are used when reading and writing rows. These endpoints let you query the columns in a table and get basic information about them.\n"
  }, {
    "name": "Controls",
    "description": "Controls provide a user-friendly way to input a value that can affect other parts of the doc. This API lets you list controls and get their current values.\n"
  }, {
    "name": "Docs",
    "description": "Coda docs are foundational, top-level collaborative projects that contain pages. The API lets you list and search your docs to obtain basic metadata like titles and ownership information.\n"
  }, {
    "name": "Formulas",
    "description": "Formulas can be great for performing one-off computations, or used with tables and other formulas to compute a single value. With this API, you can discover formulas in a doc and obtain computed results.\n"
  }, {
    "name": "Miscellaneous",
    "description": "These endpoints wouldn't fit anywhere else, but you may find them useful when working with Coda.\n"
  }, {
    "name": "Pages",
    "description": "Pages in Coda offer canvases containing rich text, tables, controls, and other objects. At this time, this API lets you list and access pages in a doc.\n"
  }, {
    "name": "Publishing",
    "description": "Coda docs can be published publicly and associated with categories to help the world discover them. This API lets you manage the publishing settings of your docs.\n"
  }, {
    "name": "Rows",
    "description": "You'll likely use this part of the API the most. These endpoints let you retrieve row data from tables in Coda as well as create, upsert, update, and delete them.\n"
  }, {
    "name": "Tables and Views",
    "description": "If you're here, you know the power of tables in Coda. This API lets you list the tables and views in a Coda doc and obtain basic schema information.\n"
  }],
  "x-tagGroups": [{
    "name": "Docs",
    "tags": ["Docs", "Publishing"]
  }, {
    "name": "Doc Structure",
    "tags": ["Pages"]
  }, {
    "name": "Tables and Views",
    "tags": ["Tables", "Columns", "Rows"]
  }, {
    "name": "Formulas & Controls",
    "tags": ["Formulas", "Controls"]
  }, {
    "name": "Miscellaneous",
    "tags": ["Account", "Miscellaneous"]
  }],
  "paths": {
    "/categories": {
      "get": {
        "summary": "Get doc categories",
        "description": "Gets all available doc categories.",
        "operationId": "listCategories",
        "tags": ["Publishing"],
        "responses": {
          "200": {
            "description": "List of doc categories",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocCategoryList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          }
        },
        "x-code-samples": [{
          "label": "Python 3.7",
          "lang": "python",
          "source": "import requests\n\nheaders = {'Authorization': 'Bearer <your API token>'}\nuri = f'https://coda.io/apis/v1/categories'\nres = requests.get(uri, headers=headers).json()\n\nprint(f'Category count: {res[\"categories\"].length}')\n# => Category count: 10\n"
        }, {
          "label": "Shell",
          "lang": "shell",
          "source": "curl -s -H 'Authorization: Bearer <your API token>' \\\n  'https://coda.io/apis/v1/categories' |\n  jq .categories.name\n# => \"10\"\n"
        }, {
          "label": "Google Apps Script",
          "lang": "javascript",
          "source": "// Import the CodaAPI library via Resource->Libraries...:\n// 15IQuWOk8MqT50FDWomh57UqWGH23gjsWVWYFms3ton6L-UHmefYHS9Vl\nCodaAPI.authenticate('<your API token>');\nvar categories = CodaAPI.listCategories();\nLogger.log('Category count: ' + categories.categories.length);\n// => Category count: 10\n"
        }]
      }
    },
    "/docs": {
      "get": {
        "summary": "List available docs",
        "description": "Returns a list of Coda docs accessible by the user. These are returned in the same order as on the docs page: reverse chronological by the latest event relevant to the user (last viewed, edited, or shared).\n",
        "operationId": "listDocs",
        "tags": ["Docs"],
        "parameters": [{
          "name": "isOwner",
          "in": "query",
          "description": "Show only docs owned by the user.",
          "schema": {
            "type": "boolean"
          }
        }, {
          "name": "query",
          "in": "query",
          "description": "Search term used to filter down results.",
          "schema": {
            "type": "string"
          }
        }, {
          "name": "sourceDoc",
          "in": "query",
          "description": "Show only docs copied from the specified doc ID.",
          "schema": {
            "type": "string"
          }
        }, {
          "name": "isStarred",
          "in": "query",
          "description": "If true, returns docs that are starred. If false, returns docs that are not starred.",
          "schema": {
            "type": "boolean"
          }
        }, {
          "name": "inGallery",
          "in": "query",
          "description": "Show only docs visible within the gallery.",
          "schema": {
            "type": "boolean"
          }
        }, {
          "name": "workspaceId",
          "in": "query",
          "description": "Show only docs belonging to the given workspace.",
          "schema": {
            "type": "string"
          }
        }, {
          "name": "folderId",
          "in": "query",
          "description": "Show only docs belonging to the given folder.",
          "schema": {
            "type": "string"
          }
        }, {
          "$ref": "#/components/parameters/limit"
        }, {
          "$ref": "#/components/parameters/pageToken"
        }],
        "responses": {
          "200": {
            "description": "List of Coda docs matching the query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          }
        },
        "x-code-samples": [{
          "label": "Python 3.7",
          "lang": "python",
          "source": "import requests\n\nheaders = {'Authorization': 'Bearer <your API token>'}\nuri = 'https://coda.io/apis/v1/docs'\nparams = {\n  'isOwner': True,\n  'query': 'New',\n}\nres = requests.get(uri, headers=headers, params=params).json()\n\nprint(f'First doc is: {res[\"items\"][0][\"name\"]}')\n# => First doc is: New Document\n"
        }, {
          "label": "Shell",
          "lang": "shell",
          "source": "curl -s -H 'Authorization: Bearer <your API token>' \\\n  'https://coda.io/apis/v1/docs' |\n  jq .items[0].name\n# => \"New Document\"\n"
        }, {
          "label": "Google Apps Script",
          "lang": "javascript",
          "source": "// Import the CodaAPI library via Resource->Libraries...:\n// 15IQuWOk8MqT50FDWomh57UqWGH23gjsWVWYFms3ton6L-UHmefYHS9Vl\nCodaAPI.authenticate('<your API token>');\nvar docs = CodaAPI.listDocs().items;\nLogger.log('First doc is ' + docs[0].name);\n// => First doc is: New Document\n"
        }]
      },
      "post": {
        "summary": "Create doc",
        "description": "Creates a new Coda doc, optionally copying an existing doc. Note that creating a doc requires you to be a Doc Maker in the applicable workspace (or be auto-promoted to one).\n",
        "operationId": "createDoc",
        "tags": ["Docs"],
        "requestBody": {
          "description": "Parameters for creating the doc.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Info about the created doc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Doc"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          }
        },
        "x-code-samples": [{
          "label": "Python 3.7",
          "lang": "python",
          "source": "import requests\n\nheaders = {'Authorization': 'Bearer <your API token>'}\nuri = f'https://coda.io/apis/v1/docs'\npayload = {\n  'title': 'Project Tracker',\n}\nreq = requests.post(uri, headers=headers, json=payload)\nreq.raise_for_status() # Throw if there was an error.\nres = req.json()\n\nprint(f'New doc created with name \"{res[\"name\"]}\"')\n# => New doc created with name \"Project Tracker\"\n"
        }, {
          "label": "Shell",
          "lang": "shell",
          "source": "curl -s -H 'Authorization: Bearer <your API token>' -X POST -H \"Content-Type: application/json\" \\\n  -d '{\"title\": \"Project Tracker\"}' \\\n  'https://coda.io/apis/v1/docs' |\n  jq .name\n# => \"Project Tracker\"\n"
        }, {
          "label": "Google Apps Script",
          "lang": "javascript",
          "source": "// Import the CodaAPI library via Resource->Libraries...:\n// 15IQuWOk8MqT50FDWomh57UqWGH23gjsWVWYFms3ton6L-UHmefYHS9Vl\nCodaAPI.authenticate('<your API token>');\nvar res = CodaAPI.createDoc({title: 'Project Tracker'});\nLogger.log('New doc created with name ' + res.name);\n// => First doc in the results is: New Document\n"
        }]
      }
    },
    "/docs/{docId}": {
      "get": {
        "summary": "Get info about a doc",
        "description": "Returns metadata for the specified doc.",
        "operationId": "getDoc",
        "tags": ["Docs"],
        "parameters": [{
          "$ref": "#/components/parameters/docId"
        }],
        "responses": {
          "200": {
            "description": "Basic Coda doc metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Doc"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          }
        },
        "x-code-samples": [{
          "label": "Python 3.7",
          "lang": "python",
          "source": "import requests\n\nheaders = {'Authorization': 'Bearer <your API token>'}\nuri = f'https://coda.io/apis/v1/docs/<doc ID>'\nres = requests.get(uri, headers=headers).json()\n\nprint(f'The name of the doc is {res[\"name\"]}')\n# => The name of the doc is New Document\n"
        }, {
          "label": "Shell",
          "lang": "shell",
          "source": "curl -s -H 'Authorization: Bearer <your API token>' \\\n  'https://coda.io/apis/v1/docs/<doc ID>' |\n  jq .name\n# => \"New Document\"\n"
        }, {
          "label": "Google Apps Script",
          "lang": "javascript",
          "source": "// Import the CodaAPI library via Resource->Libraries...:\n// 15IQuWOk8MqT50FDWomh57UqWGH23gjsWVWYFms3ton6L-UHmefYHS9Vl\nCodaAPI.authenticate('<your API token>');\nvar docInfo = CodaAPI.getDoc('<doc ID>');\nLogger.log('The name of the doc is ' + docInfo.name);\n// => The name of the doc is New Document\n"
        }]
      },
      "delete": {
        "summary": "Delete doc",
        "description": "Deletes a doc.",
        "operationId": "deleteDoc",
        "tags": ["Docs"],
        "parameters": [{
          "$ref": "#/components/parameters/docId"
        }],
        "responses": {
          "202": {
            "description": "A result indicating that the doc was deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocDelete"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          }
        },
        "x-code-samples": [{
          "label": "Python 3.7",
          "lang": "python",
          "source": "import requests\n\nheaders = {'Authorization': 'Bearer <your API token>'}\nuri = f'https://coda.io/apis/v1/docs/<doc ID>'\nres = requests.delete(uri, headers=headers).json()\n"
        }, {
          "label": "Shell",
          "lang": "shell",
          "source": "curl -s -X DELETE -H 'Authorization: Bearer <your API token>' \\\n  'https://coda.io/apis/v1/docs/<doc ID>' |\n"
        }, {
          "label": "Google Apps Script",
          "lang": "javascript",
          "source": "// Import the CodaAPI library via Resource->Libraries...:\n// 15IQuWOk8MqT50FDWomh57UqWGH23gjsWVWYFms3ton6L-UHmefYHS9Vl\nCodaAPI.authenticate('<your API token>');\nvar docInfo = CodaAPI.deleteDoc('<doc ID>');\n// => The given doc is now deleted\n"
        }]
      }
    },
    "/docs/{docId}/acl/metadata": {
      "get": {
        "summary": "AclMetadata",
        "description": "Returns metadata associated with ACL for this Coda doc.",
        "operationId": "getAclMetadata",
        "tags": ["Acl"],
        "parameters": [{
          "$ref": "#/components/parameters/docId"
        }],
        "responses": {
          "200": {
            "description": "Metadata associated with Acl for a doc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AclMetadata"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          }
        }
      }
    },
    "/docs/{docId}/acl/permissions": {
      "get": {
        "summary": "Acl",
        "description": "Returns a list of permissionos for this Coda doc.",
        "operationId": "getAclPermissions",
        "tags": ["Acl"],
        "parameters": [{
          "$ref": "#/components/parameters/docId"
        }, {
          "$ref": "#/components/parameters/limit"
        }, {
          "$ref": "#/components/parameters/pageToken"
        }],
        "responses": {
          "200": {
            "description": "List of permissionis for a doc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Acl"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          }
        }
      },
      "post": {
        "summary": "Add permission",
        "description": "Adds a new permission to the doc.\n",
        "operationId": "shareDoc",
        "tags": ["Acl"],
        "parameters": [{
          "$ref": "#/components/parameters/docId"
        }],
        "requestBody": {
          "description": "Parameters for adding the new permission.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddPermission"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Confirmation that the request was applied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddPermissionResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          }
        }
      }
    },
    "/docs/{docId}/acl/permissions/{permissionId}": {
      "delete": {
        "summary": "Delete permission",
        "description": "Deletes an existing permission.\n",
        "operationId": "deletePermission",
        "tags": ["Acl"],
        "parameters": [{
          "$ref": "#/components/parameters/docId"
        }, {
          "$ref": "#/components/parameters/permissionId"
        }],
        "responses": {
          "200": {
            "description": "Confirmation that the request was applied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletePermissionResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          }
        }
      }
    },
    "/docs/{docId}/publish": {
      "put": {
        "summary": "Publish doc",
        "description": "Update publish settings for a doc.",
        "operationId": "publishDoc",
        "tags": ["Publishing"],
        "parameters": [{
          "$ref": "#/components/parameters/docId"
        }],
        "requestBody": {
          "description": "Parameters for changing publish settings.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocPublish"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Confirmation that the publish request was accepted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublishResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          }
        },
        "x-code-samples": [{
          "label": "Python 3.7",
          "lang": "python",
          "source": "import requests\n\nheaders = {'Authorization': 'Bearer <your API token>'}\nuri = f'https://coda.io/apis/v1/docs/<doc ID>/publish'\npayload = {\n  'discoverable': true,\n}\nreq = requests.put(uri, headers=headers, json=payload)\nreq.raise_for_status() # Throw if there was an error.\nres = req.json()\n\nprint(f'Discoverable will be true')\n# => Discoverable will be true\n"
        }, {
          "label": "Shell",
          "lang": "shell",
          "source": "curl -s -H 'Authorization: Bearer <your API token>' -X POST -H \"Content-Type: application/json\" \\\n  -d '{\"discoverable\": true}' \\\n  'https://coda.io/apis/v1/docs/<doc ID>/publish'\n  # => Will be discoverable\n"
        }, {
          "label": "Google Apps Script",
          "lang": "javascript",
          "source": "// Import the CodaAPI library via Resource->Libraries...:\n// 15IQuWOk8MqT50FDWomh57UqWGH23gjsWVWYFms3ton6L-UHmefYHS9Vl\nCodaAPI.authenticate('<your API token>');\nvar res = CodaAPI.publishDoc(<doc ID>, {discoverable: true});\nLogger.log('Discoverable will be true');\n// => Discoverable will be true\n"
        }]
      },
      "delete": {
        "summary": "Unpublish doc",
        "description": "Unpublishes a doc.",
        "operationId": "unpublishDoc",
        "tags": ["Publishing"],
        "parameters": [{
          "$ref": "#/components/parameters/docId"
        }],
        "responses": {
          "200": {
            "description": "A result indicating that the doc was unpublished.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnpublishResult"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          }
        },
        "x-code-samples": [{
          "label": "Python 3.7",
          "lang": "python",
          "source": "import requests\n\nheaders = {'Authorization': 'Bearer <your API token>'}\nuri = f'https://coda.io/apis/v1/docs/<doc ID>/publish'\nres = requests.unpublishDoc(uri, headers=headers).json()\n"
        }, {
          "label": "Shell",
          "lang": "shell",
          "source": "curl -s -X DELETE -H 'Authorization: Bearer <your API token>' \\\n  'https://coda.io/apis/v1/docs/<doc ID>/unpublish' |\n"
        }, {
          "label": "Google Apps Script",
          "lang": "javascript",
          "source": "// Import the CodaAPI library via Resource->Libraries...:\n// 15IQuWOk8MqT50FDWomh57UqWGH23gjsWVWYFms3ton6L-UHmefYHS9Vl\nCodaAPI.authenticate('<your API token>');\nvar docInfo = CodaAPI.unpublishDoc('<doc ID>');\n// => The given doc is now unpublished\n"
        }]
      }
    },
    "/docs/{docId}/pages": {
      "get": {
        "summary": "List pages",
        "description": "Returns a list of pages in a Coda doc.",
        "operationId": "listPages",
        "tags": ["Pages"],
        "parameters": [{
          "$ref": "#/components/parameters/docId"
        }, {
          "$ref": "#/components/parameters/limit"
        }, {
          "$ref": "#/components/parameters/pageToken"
        }],
        "responses": {
          "200": {
            "description": "List of pages.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          }
        },
        "x-code-samples": [{
          "label": "Python 3.7",
          "lang": "python",
          "source": "import requests\n\nheaders = {'Authorization': 'Bearer <your API token>'}\nuri = f'https://coda.io/apis/v1/docs/<doc ID>/pages'\nres = requests.get(uri, headers=headers).json()\n\nprint(f'The name of the first page is {res[\"items\"][0][\"name\"]}')\n# => The name of the first page is Page 1\n"
        }, {
          "label": "Shell",
          "lang": "shell",
          "source": "curl -s -H 'Authorization: Bearer <your API token>' \\\n  'https://coda.io/apis/v1/docs/<doc ID>/pages' |\n  jq '.items[0].name'\n# => \"Page 1\"\n"
        }, {
          "label": "Google Apps Script",
          "lang": "javascript",
          "source": "// Import the CodaAPI library via Resource->Libraries...:\n// 15IQuWOk8MqT50FDWomh57UqWGH23gjsWVWYFms3ton6L-UHmefYHS9Vl\nCodaAPI.authenticate('<your API token>');\nvar pages = CodaAPI.listPages('<doc ID>').items;\nLogger.log('The name of the first page is ' + pages[0].name);\n// => The name of the first page is Page 1\n"
        }]
      }
    },
    "/docs/{docId}/pages/{pageIdOrName}": {
      "get": {
        "summary": "Get a page",
        "description": "Returns details about a page.",
        "operationId": "getPage",
        "tags": ["Pages"],
        "parameters": [{
          "$ref": "#/components/parameters/docId"
        }, {
          "$ref": "#/components/parameters/pageIdOrName"
        }],
        "responses": {
          "200": {
            "description": "Info about a page.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "410": {
            "$ref": "#/components/responses/GoneError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          }
        },
        "x-code-samples": [{
          "label": "Python 3.7",
          "lang": "python",
          "source": "import requests\n\nheaders = {'Authorization': 'Bearer <your API token>'}\nuri = f'https://coda.io/apis/v1/docs/<doc ID>/pages/<page ID>'\nres = requests.get(uri, headers=headers).json()\n\nprint(f'The name of this page is {res[\"name\"]}')\n# => The name of this page is Page 1\n"
        }, {
          "label": "Shell",
          "lang": "shell",
          "source": "curl -s -H 'Authorization: Bearer <your API token>' \\\n  'https://coda.io/apis/v1/docs/<doc ID>/pages/<page ID>' |\n  jq '.name'\n# => \"Page 1\"\n"
        }, {
          "label": "Google Apps Script",
          "lang": "javascript",
          "source": "// Import the CodaAPI library via Resource->Libraries...:\n// 15IQuWOk8MqT50FDWomh57UqWGH23gjsWVWYFms3ton6L-UHmefYHS9Vl\nCodaAPI.authenticate('<your API token>');\nvar page = CodaAPI.getPage('<doc ID>', '<page ID>');\nLogger.log('The name of this page is ' + page.name);\n// => The name of this page is Page 1\n"
        }]
      },
      "put": {
        "summary": "Update a page",
        "description": "Update properties for a page.",
        "operationId": "updatePage",
        "tags": ["Pages"],
        "parameters": [{
          "$ref": "#/components/parameters/docId"
        }, {
          "$ref": "#/components/parameters/pageIdOrName"
        }],
        "requestBody": {
          "description": "Parameters for updating a page.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PageUpdate"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "A result indicating that the update was queued for processing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageUpdateResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          }
        },
        "x-code-samples": [{
          "label": "Python 3.7",
          "lang": "python",
          "source": "import requests\n\nheaders = {'Authorization': 'Bearer <your API token>'}\nuri = f'https://coda.io/apis/v1/docs/<doc ID>/pages/<page ID>'\npayload = {\n  'name': 'New Page Name',\n}\nreq = requests.put(uri, headers=headers, json=payload)\nreq.raise_for_status() # Throw if there was an error.\nres = req.json()\n\nprint(f'Updated page {res[\"id\"]}')\n# => Updated page <page ID>\n"
        }, {
          "label": "Shell",
          "lang": "shell",
          "source": "curl -s -H 'Authorization: Bearer <your API token>' -X PUT -H \"Content-Type: application/json\" \\\n  -d '{\"name\": \"New Page Name\"}' \\\n  'https://coda.io/apis/v1/docs/<doc ID>/pages/<page ID>' |\n  jq '\"Updated page \" + .id'\n# => \"Updated page <page ID>\"\n"
        }, {
          "label": "Google Apps Script",
          "lang": "javascript",
          "source": "// Import the CodaAPI library via Resource->Libraries...:\n// 15IQuWOk8MqT50FDWomh57UqWGH23gjsWVWYFms3ton6L-UHmefYHS9Vl\nCodaAPI.authenticate('<your API token>');\nvar res = CodaAPI.updatePage(<doc ID>, <page ID>, {name: \"New Page Name\"});\nLogger.log('Updated page ' + res.id);\n// => Updated page <page ID>\n"
        }]
      }
    },
    "/docs/{docId}/tables": {
      "get": {
        "summary": "List tables",
        "description": "Returns a list of tables in a Coda doc.",
        "operationId": "listTables",
        "tags": ["Tables"],
        "parameters": [{
          "$ref": "#/components/parameters/docId"
        }, {
          "$ref": "#/components/parameters/limit"
        }, {
          "$ref": "#/components/parameters/pageToken"
        }, {
          "$ref": "#/components/parameters/sortBy"
        }, {
          "$ref": "#/components/parameters/tableTypes"
        }],
        "responses": {
          "200": {
            "description": "List of tables or views in a doc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          }
        },
        "x-code-samples": [{
          "label": "Python 3.7",
          "lang": "python",
          "source": "import requests\n\nheaders = {'Authorization': 'Bearer <your API token>'}\nuri = f'https://coda.io/apis/v1/docs/<doc ID>/tables'\nres = requests.get(uri, headers=headers).json()\n\nprint(f'The name of the first table is {res[\"items\"][0][\"name\"]}')\n# => The name of the first table is To-do List\n"
        }, {
          "label": "Shell",
          "lang": "shell",
          "source": "curl -s -H 'Authorization: Bearer <your API token>' \\\n  'https://coda.io/apis/v1/docs/<doc ID>/tables' |\n  jq '.items[0].name'\n# => \"To-do List\"\n"
        }, {
          "label": "Google Apps Script",
          "lang": "javascript",
          "source": "// Import the CodaAPI library via Resource->Libraries...:\n// 15IQuWOk8MqT50FDWomh57UqWGH23gjsWVWYFms3ton6L-UHmefYHS9Vl\nCodaAPI.authenticate('<your API token>');\nvar tables = CodaAPI.listTables('<doc ID>').items;\nLogger.log('The name of the first table is ' + tables[0].name);\n// => The name of the first table is To-do List\n"
        }]
      }
    },
    "/docs/{docId}/tables/{tableIdOrName}": {
      "get": {
        "summary": "Get a table",
        "description": "Returns details about a specific table or view.",
        "operationId": "getTable",
        "tags": ["Tables"],
        "parameters": [{
          "$ref": "#/components/parameters/docId"
        }, {
          "$ref": "#/components/parameters/tableIdOrName"
        }],
        "responses": {
          "200": {
            "description": "Info about a table.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Table"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          }
        },
        "x-code-samples": [{
          "label": "Python 3.7",
          "lang": "python",
          "source": "import requests\n\nheaders = {'Authorization': 'Bearer <your API token>'}\nuri = f'https://coda.io/apis/v1/docs/<doc ID>/tables/<table ID>'\nres = requests.get(uri, headers=headers).json()\n\nprint(f'Table {res[\"name\"]} has {res[\"rowCount\"]} rows')\n# => Table To-do List has 2 rows\n"
        }, {
          "label": "Shell",
          "lang": "shell",
          "source": "curl -s -H 'Authorization: Bearer <your API token>' \\\n  'https://coda.io/apis/v1/docs/<doc ID>/tables/<table ID>' |\n  jq '\"Table \" + .name + \" has \" + (.rowCount | tostring) + \" rows\"'\n# => \"Table To-do List has 2 rows\"\n"
        }, {
          "label": "Google Apps Script",
          "lang": "javascript",
          "source": "// Import the CodaAPI library via Resource->Libraries...:\n// 15IQuWOk8MqT50FDWomh57UqWGH23gjsWVWYFms3ton6L-UHmefYHS9Vl\nCodaAPI.authenticate('<your API token>');\nvar table = CodaAPI.getTable('<doc ID>', '<table ID>');\nLogger.log('Table ' + table.name + ' has ' + table.rowCount + ' rows');\n// => Table To-do List has 2 rows\n"
        }]
      }
    },
    "/docs/{docId}/tables/{tableIdOrName}/columns": {
      "get": {
        "summary": "List columns",
        "description": "Returns a list of columns in a table.",
        "operationId": "listColumns",
        "tags": ["Columns"],
        "parameters": [{
          "$ref": "#/components/parameters/docId"
        }, {
          "$ref": "#/components/parameters/tableIdOrName"
        }, {
          "$ref": "#/components/parameters/limit"
        }, {
          "$ref": "#/components/parameters/pageToken"
        }, {
          "name": "visibleOnly",
          "description": "If true, returns only visible columns for the table.",
          "in": "query",
          "example": true,
          "schema": {
            "type": "boolean"
          }
        }],
        "responses": {
          "200": {
            "description": "List of columns in the table.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ColumnList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          }
        },
        "x-code-samples": [{
          "label": "Python 3.7",
          "lang": "python",
          "source": "import requests\n\nheaders = {'Authorization': 'Bearer <your API token>'}\nuri = f'https://coda.io/apis/v1/docs/<doc ID>/tables/<table ID>/columns'\nres = requests.get(uri, headers=headers).json()\n\nprint(f'This table\\'s columns: {\", \".join(c[\"name\"] for c in res[\"items\"])}')\n# => This table's columns: Task, Duration (hr), Duration (min)\n"
        }, {
          "label": "Shell",
          "lang": "shell",
          "source": "curl -s -H 'Authorization: Bearer <your API token>' \\\n  'https://coda.io/apis/v1/docs/<doc ID>/tables/<table ID>/columns' |\n  jq '.items | map(.name) | join(\", \")'\n# => \"Task, Duration (hr), Duration (min)\"\n"
        }, {
          "label": "Google Apps Script",
          "lang": "javascript",
          "source": "// Import the CodaAPI library via Resource->Libraries...:\n// 15IQuWOk8MqT50FDWomh57UqWGH23gjsWVWYFms3ton6L-UHmefYHS9Vl\nCodaAPI.authenticate('<your API token>');\nvar columns = CodaAPI.listColumns('<doc ID>', '<table ID>').items;\nvar names = columns.map(function(column) { return column.name; });\nLogger.log('This table\\'s columns: ' + names.join(', '));\n// => This table's columns: Task, Duration (hr), Duration (min)\n"
        }]
      }
    },
    "/docs/{docId}/tables/{tableIdOrName}/rows": {
      "get": {
        "summary": "List table rows",
        "description": "Returns a list of rows in a table.",
        "operationId": "listRows",
        "tags": ["Rows"],
        "parameters": [{
          "$ref": "#/components/parameters/docId"
        }, {
          "$ref": "#/components/parameters/tableIdOrName"
        }, {
          "name": "query",
          "description": "Query used to filter returned rows, specified as `<column_id_or_name>:<value>`. If you'd like to use a column name instead of an ID, you must quote it (e.g., `\"My Column\":123`). Also note that `value` is a JSON value; if you'd like to use a string, you must surround it in quotes (e.g., `\"groceries\"`).\n",
          "in": "query",
          "example": "c-tuVwxYz:\"Apple\"",
          "schema": {
            "type": "string"
          }
        }, {
          "name": "sortBy",
          "in": "query",
          "description": "Specifies the sort order of the rows returned. If left unspecified, rows are returned by creation time ascending.",
          "schema": {
            "$ref": "#/components/schemas/RowsSortBy"
          }
        }, {
          "$ref": "#/components/parameters/useColumnNames"
        }, {
          "name": "valueFormat",
          "in": "query",
          "description": "The format that cell values are returned as.",
          "schema": {
            "$ref": "#/components/schemas/ValueFormat"
          }
        }, {
          "name": "visibleOnly",
          "description": "If true, returns only visible rows and columns for the table.",
          "in": "query",
          "example": true,
          "schema": {
            "type": "boolean"
          }
        }, {
          "$ref": "#/components/parameters/limit"
        }, {
          "$ref": "#/components/parameters/pageToken"
        }],
        "responses": {
          "200": {
            "description": "List of rows in the table.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RowList"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          }
        },
        "x-code-samples": [{
          "label": "Python 3.7",
          "lang": "python",
          "source": "import requests\n\nheaders = {'Authorization': 'Bearer <your API token>'}\nuri = f'https://coda.io/apis/v1/docs/<doc ID>/tables/<table ID>/rows'\nparams = {\n  'query': '<column ID>:\"Work out\"',\n}\nreq = requests.get(uri, headers=headers, params=params)\nreq.raise_for_status() # Throw if there was an error.\nres = req.json()\n\nprint(f'Matching rows: {len(res[\"items\"])}')\n# => Matching rows: 1\n"
        }, {
          "label": "Shell",
          "lang": "shell",
          "source": "curl -s -H 'Authorization: Bearer <your API token>' \\\n  -G --data-urlencode 'query=<column ID>:\"Work out\"' \\\n  'https://coda.io/apis/v1/docs/<doc ID>/tables/<table ID>/rows' |\n  jq '\"Matching rows: \" + (.items | length | tostring)'\n# => \"Matching rows: 1\"\n"
        }, {
          "label": "Google Apps Script",
          "lang": "javascript",
          "source": "// Import the CodaAPI library via Resource->Libraries...:\n// 15IQuWOk8MqT50FDWomh57UqWGH23gjsWVWYFms3ton6L-UHmefYHS9Vl\nCodaAPI.authenticate('<your API token>');\nvar query = '<column ID>:\"Work out\"';\nvar rows = CodaAPI.listRows('<doc ID>', '<table ID>', {query: query}).items;\nLogger.log('Matching rows: ' + rows.length);\n// => Matching rows: 1\n"
        }]
      },
      "post": {
        "summary": "Insert/upsert rows",
        "description": "Inserts rows into a table, optionally updating existing rows if any upsert key columns are provided. This endpoint will always return a 202, so long as the doc and table exist and are accessible (and the update is structurally valid). Row inserts/upserts are generally processed within several seconds.\nWhen upserting, if multiple rows match the specified key column(s), they will all be updated with the specified value.\n",
        "operationId": "upsertRows",
        "tags": ["Rows"],
        "parameters": [{
          "$ref": "#/components/parameters/docId"
        }, {
          "$ref": "#/components/parameters/tableIdOrName"
        }, {
          "name": "disableParsing",
          "description": "If true, the API will not attempt to parse the data in any way.",
          "in": "query",
          "example": true,
          "schema": {
            "type": "boolean"
          }
        }],
        "requestBody": {
          "description": "Rows to insert or upsert.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RowsUpsert"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "A result indicating that the upsert was queued for processing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RowsUpsertResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          }
        },
        "x-code-samples": [{
          "label": "Python 3.7",
          "lang": "python",
          "source": "import requests\n\nheaders = {'Authorization': 'Bearer <your API token>'}\nuri = f'https://coda.io/apis/v1/docs/<doc ID>/tables/<table ID>/rows'\npayload = {\n  'rows': [\n    {\n      'cells': [\n        {'column': '<column ID>', 'value': 'Feed Baker'},\n      ],\n    },\n  ],\n}\nreq = requests.post(uri, headers=headers, json=payload)\nreq.raise_for_status() # Throw if there was an error.\nres = req.json()\n\nprint(f'Inserted 1 row')\n# => Inserted 1 row\n"
        }, {
          "label": "Shell",
          "lang": "shell",
          "source": "curl -s -H 'Authorization: Bearer <your API token>' -X POST -H \"Content-Type: application/json\" \\\n  -d '{\"rows\": [{\"cells\": [{\"column\": \"<column ID>\", \"value\": \"Feed Baker\"}]}]}' \\\n  'https://coda.io/apis/v1/docs/<doc ID>/tables/<table ID>/rows' |\n  jq 'if .statusMessage? == null then \"Inserted 1 row\" else . end'\n# => \"Inserted 1 row\"\n"
        }, {
          "label": "Google Apps Script",
          "lang": "javascript",
          "source": "// Import the CodaAPI library via Resource->Libraries...:\n// 15IQuWOk8MqT50FDWomh57UqWGH23gjsWVWYFms3ton6L-UHmefYHS9Vl\nCodaAPI.authenticate('<your API token>');\nvar body = {\n  'rows': [\n    {\n      'cells': [\n        {'column': '<column ID>', 'value': 'Feed Baker'},\n      ],\n    },\n  ],\n};\nCodaAPI.upsertRows('<doc ID>', '<table ID>', body);\nLogger.log('Inserted 1 row');\n// => Inserted 1 row\n"
        }]
      },
      "delete": {
        "summary": "Delete multiple rows",
        "description": "Deletes the specified rows from the table or view. This endpoint will always return a 202. Row deletions are generally processed within several seconds.\n",
        "operationId": "deleteRows",
        "tags": ["Rows"],
        "parameters": [{
          "$ref": "#/components/parameters/docId"
        }, {
          "$ref": "#/components/parameters/tableIdOrName"
        }],
        "requestBody": {
          "description": "Rows to delete.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RowsDelete"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "A result indicating that the delete was queued for processing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RowsDeleteResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          }
        },
        "x-code-samples": [{
          "label": "Python 3.7",
          "lang": "python",
          "source": "import requests\n\nheaders = {'Authorization': 'Bearer <your API token>'}\nuri = f'https://coda.io/apis/v1/docs/<doc ID>/tables/<table ID>/rows'\npayload = {\n  'rowIds': ['i-aBcDeFgH', 'i-AbCdEfGh'],\n}\nreq = requests.delete(uri, headers=headers, json=payload)\nreq.raise_for_status() # Throw if there was an error.\nres = req.json()\n\nprint(f'Deleted 2 rows')\n# => Deleted 2 rows\n"
        }, {
          "label": "Shell",
          "lang": "shell",
          "source": "curl -s -H 'Authorization: Bearer <your API token>' -X DELETE -H \"Content-Type: application/json\" \\\n  -d '{\"rowIds\": ['i-aBcDeFgH', 'i-AbCdEfGh']}' \\\n  'https://coda.io/apis/v1/docs/<doc ID>/tables/<table ID>/rows' |\n  jq 'if .statusMessage? == null then \"Deleted 2 rows\" else . end'\n# => \"Deleted 2 rows\"\n"
        }, {
          "label": "Google Apps Script",
          "lang": "javascript",
          "source": "// Import the CodaAPI library via Resource->Libraries...:\n// 15IQuWOk8MqT50FDWomh57UqWGH23gjsWVWYFms3ton6L-UHmefYHS9Vl\nCodaAPI.authenticate('<your API token>');\nvar body = {\n  'rowIds': ['i-aBcDeFgH', 'i-AbCdEfGh'],\n};\nCodaAPI.deleteRows('<doc ID>', '<table ID>', body);\nLogger.log('Deleted 2 rows');\n// => Deleted 2 rows\n"
        }]
      }
    },
    "/docs/{docId}/tables/{tableIdOrName}/rows/{rowIdOrName}": {
      "get": {
        "summary": "Get a row",
        "description": "Returns details about a row in a table.",
        "operationId": "getRow",
        "tags": ["Rows"],
        "parameters": [{
          "$ref": "#/components/parameters/docId"
        }, {
          "$ref": "#/components/parameters/tableIdOrName"
        }, {
          "$ref": "#/components/parameters/rowIdOrName"
        }, {
          "$ref": "#/components/parameters/useColumnNames"
        }, {
          "name": "valueFormat",
          "in": "query",
          "description": "The format that cell values are returned as.",
          "schema": {
            "$ref": "#/components/schemas/ValueFormat"
          }
        }],
        "responses": {
          "200": {
            "description": "Info about a row. If this row was retrieved by name, only one matching row will be returned, with no guarantees as to which one it is.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RowDetail"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          }
        },
        "x-code-samples": [{
          "label": "Python 3.7",
          "lang": "python",
          "source": "import requests\n\nheaders = {'Authorization': 'Bearer <your API token>'}\nuri = f'https://coda.io/apis/v1/docs/<doc ID>/tables/<table ID>/rows/<row ID>'\nreq = requests.get(uri, headers=headers)\nreq.raise_for_status() # Throw if there was an error.\nres = req.json()\n\nprint(f'Row values are: {\", \".join(str(v) for v in res[\"values\"].values())}')\n# => Row values are: Get groceries, 1, 60\n"
        }, {
          "label": "Shell",
          "lang": "shell",
          "source": "curl -s -H 'Authorization: Bearer <your API token>' \\\n  'https://coda.io/apis/v1/docs/<doc ID>/tables/<table ID>/rows/<row ID>' |\n  jq '.values | map(tostring) | join(\", \")'\n# => \"Get groceries, 1, 60\"\n"
        }, {
          "label": "Google Apps Script",
          "lang": "javascript",
          "source": "// Import the CodaAPI library via Resource->Libraries...:\n// 15IQuWOk8MqT50FDWomh57UqWGH23gjsWVWYFms3ton6L-UHmefYHS9Vl\nCodaAPI.authenticate('<your API token>');\nvar row = CodaAPI.getRow('<doc ID>', '<table ID>', '<row ID>');\nvar values = Object.keys(row.values).map(function(colId) { return row.values[colId]; });\nLogger.log('Row values are: ' + values.join(', '));\n// => Row values are: Get groceries, 1, 60\n"
        }]
      },
      "put": {
        "summary": "Update row",
        "description": "Updates the specified row in the table. This endpoint will always return a 202, so long as the row exists and is accessible (and the update is structurally valid). Row updates are generally processed within several seconds. When updating using a name as opposed to an ID, an arbitrary row will be affected.\n",
        "operationId": "updateRow",
        "tags": ["Rows"],
        "parameters": [{
          "$ref": "#/components/parameters/docId"
        }, {
          "$ref": "#/components/parameters/tableIdOrName"
        }, {
          "$ref": "#/components/parameters/rowIdOrName"
        }, {
          "name": "disableParsing",
          "description": "If true, the API will not attempt to parse the data in any way.",
          "in": "query",
          "example": true,
          "schema": {
            "type": "boolean"
          }
        }],
        "requestBody": {
          "description": "Row update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RowUpdate"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "A result indicating that the update was queued for processing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RowUpdateResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          }
        },
        "x-code-samples": [{
          "label": "Python 3.7",
          "lang": "python",
          "source": "import requests\n\nheaders = {'Authorization': 'Bearer <your API token>'}\nuri = f'https://coda.io/apis/v1/docs/<doc ID>/tables/<table ID>/rows/<row ID>'\npayload = {\n  'row': {\n    'cells': [\n      {'column': '<column ID>', 'value': 'Get groceries from Whole Foods'},\n    ],\n  },\n}\nreq = requests.put(uri, headers=headers, json=payload)\nreq.raise_for_status() # Throw if there was an error.\nres = req.json()\n\nprint(f'Updated row {res[\"id\"]}')\n# => Updated row <row ID>\n"
        }, {
          "label": "Shell",
          "lang": "shell",
          "source": "curl -s -H 'Authorization: Bearer <your API token>' -X PUT -H \"Content-Type: application/json\" \\\n  -d '{\"row\": {\"cells\": [{\"column\": \"<column ID>\", \"value\": \"Get groceries from Whole Foods\"}]}}' \\\n  'https://coda.io/apis/v1/docs/<doc ID>/tables/<table ID>/rows/<row ID>' |\n  jq '\"Updated row \" + .id'\n# => \"Updated row <row ID>\"\n"
        }, {
          "label": "Google Apps Script",
          "lang": "javascript",
          "source": "// Import the CodaAPI library via Resource->Libraries...:\n// 15IQuWOk8MqT50FDWomh57UqWGH23gjsWVWYFms3ton6L-UHmefYHS9Vl\nCodaAPI.authenticate('<your API token>');\nvar body = {\n  row: {\n    cells: [\n      {'column': '<column ID>', 'value': 'Get groceries from Whole Foods'},\n    ],\n  },\n};\nvar row = CodaAPI.updateRow('<doc ID>', '<table ID>', '<row ID>', body);\nLogger.log('Updated row ' + row.id);\n// => Updated row <row ID>\n"
        }]
      },
      "delete": {
        "summary": "Delete row",
        "description": "Deletes the specified row from the table or view. This endpoint will always return a 202, so long as the row exists and is accessible (and the update is structurally valid). Row deletions are generally processed within several seconds. When deleting using a name as opposed to an ID, an arbitrary row will be removed.\n",
        "operationId": "deleteRow",
        "tags": ["Rows"],
        "parameters": [{
          "$ref": "#/components/parameters/docId"
        }, {
          "$ref": "#/components/parameters/tableIdOrName"
        }, {
          "$ref": "#/components/parameters/rowIdOrName"
        }],
        "responses": {
          "202": {
            "description": "A result indicating that the deletion was queued for processing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RowDeleteResult"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          }
        },
        "x-code-samples": [{
          "label": "Python 3.7",
          "lang": "python",
          "source": "import requests\n\nheaders = {'Authorization': 'Bearer <your API token>'}\nuri = f'https://coda.io/apis/v1/docs/<doc ID>/tables/<table ID>/rows/<row ID>'\nreq = requests.delete(uri, headers=headers)\nreq.raise_for_status() # Throw if there was an error.\nres = req.json()\n\nprint(f'Deleted row {res[\"id\"]}')\n# => Deleted row <row ID>\n"
        }, {
          "label": "Shell",
          "lang": "shell",
          "source": "curl -s -H 'Authorization: Bearer <your API token>' -X DELETE \\\n  'https://coda.io/apis/v1/docs/<doc ID>/tables/<table ID>/rows/<row ID>' |\n  jq '\"Deleted row \" + .id'\n# => \"Deleted row <row ID>\"\n"
        }, {
          "label": "Google Apps Script",
          "lang": "javascript",
          "source": "// Import the CodaAPI library via Resource->Libraries...:\n// 15IQuWOk8MqT50FDWomh57UqWGH23gjsWVWYFms3ton6L-UHmefYHS9Vl\nCodaAPI.authenticate('<your API token>');\nvar row = CodaAPI.deleteRow('<doc ID>', '<table ID>', '<row ID>');\nLogger.log('Deleted row ' + row.id);\n// => Deleted row <row ID>\n"
        }]
      }
    },
    "/docs/{docId}/tables/{tableIdOrName}/rows/{rowIdOrName}/buttons/{columnIdOrName}": {
      "post": {
        "summary": "Push a button",
        "description": "Pushes a button on a row in a table.\nAuthorization note: This action is available to API tokens that are authorized to write to the table. However, the underlying button can perform any action on the document, including writing to other tables and performing Pack actions.\n",
        "operationId": "pushButton",
        "tags": ["Rows"],
        "parameters": [{
          "$ref": "#/components/parameters/docId"
        }, {
          "$ref": "#/components/parameters/tableIdOrName"
        }, {
          "$ref": "#/components/parameters/rowIdOrName"
        }, {
          "$ref": "#/components/parameters/columnIdOrName"
        }],
        "responses": {
          "202": {
            "description": "A result indicating that the push button action was queued for processing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PushButtonResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          }
        },
        "x-code-samples": [{
          "label": "Python 3.7",
          "lang": "python",
          "source": "import requests\n\nheaders = {'Authorization': 'Bearer <your API token>'}\nuri = f'https://coda.io/apis/v1/docs/<doc ID>/tables/<table ID>/rows/<row ID>/buttons/<column ID>'\nreq = requests.post(uri, headers=headers)\nreq.raise_for_status() # Throw if there was an error.\nres = req.json()\nprint(f'Pushed button')\n# => Pushed button\n"
        }, {
          "label": "Shell",
          "lang": "shell",
          "source": "curl -s -H 'Authorization: Bearer <your API token>' -X POST \\\n  'https://coda.io/apis/v1/docs/<doc ID>/tables/<table ID>/rows/<row ID>/buttons/<column ID>' |\n  jq 'if .statusMessage? == null then \"Pushed button\" else . end'\n  # => Pushed button\n"
        }, {
          "label": "Google Apps Script",
          "lang": "javascript",
          "source": "// Import the CodaAPI library via Resource->Libraries...:\n// 15IQuWOk8MqT50FDWomh57UqWGH23gjsWVWYFms3ton6L-UHmefYHS9Vl\nCodaAPI.authenticate('<your API token>');\nCodaAPI.pushButton('<doc ID>', '<table ID>', '<row ID>', '<column ID>');\nLogger.log('Pushed button');\n// => Pushed button\n"
        }]
      }
    },
    "/docs/{docId}/tables/{tableIdOrName}/columns/{columnIdOrName}": {
      "get": {
        "summary": "Get a column",
        "description": "Returns details about a column in a table.",
        "operationId": "getColumn",
        "tags": ["Columns"],
        "parameters": [{
          "$ref": "#/components/parameters/docId"
        }, {
          "$ref": "#/components/parameters/tableIdOrName"
        }, {
          "$ref": "#/components/parameters/columnIdOrName"
        }],
        "responses": {
          "200": {
            "description": "Info about a column.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ColumnDetail"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          }
        },
        "x-code-samples": [{
          "label": "Python 3.7",
          "lang": "python",
          "source": "import requests\n\nheaders = {'Authorization': 'Bearer <your API token>'}\nuri = f'https://coda.io/apis/v1/docs/<doc ID>/tables/<table ID>/columns/<column ID>'\nres = requests.get(uri, headers=headers).json()\n\nis_default = res.get(\"display\", False)\nprint(f'Column {res[\"name\"]} {\"is\" if is_default else \"is not\"} the display column')\n# => Column Task is the display column\n"
        }, {
          "label": "Shell",
          "lang": "shell",
          "source": "curl -s -H 'Authorization: Bearer <your API token>' \\\n  'https://coda.io/apis/v1/docs/<doc ID>/tables/<table ID>/columns/<column ID>' |\n  jq '\"Column \" + .name + (if .display then \" is\" else \" is not\" end) + \" the display column\"'\n# => \"Column Task is the display column\"\n"
        }, {
          "label": "Google Apps Script",
          "lang": "javascript",
          "source": "// Import the CodaAPI library via Resource->Libraries...:\n// 15IQuWOk8MqT50FDWomh57UqWGH23gjsWVWYFms3ton6L-UHmefYHS9Vl\nCodaAPI.authenticate('<your API token>');\nvar column = CodaAPI.getColumn('<doc ID>', '<table ID>', '<column ID>');\nLogger.log('Column ' + column.name + (column.display ? ' is' : ' is not') + ' the display column');\n# => Column Task is the display column\n"
        }]
      }
    },
    "/docs/{docId}/formulas": {
      "get": {
        "summary": "List formulas",
        "description": "Returns a list of named formulas in a Coda doc.",
        "operationId": "listFormulas",
        "tags": ["Formulas"],
        "parameters": [{
          "$ref": "#/components/parameters/docId"
        }, {
          "$ref": "#/components/parameters/limit"
        }, {
          "$ref": "#/components/parameters/pageToken"
        }, {
          "$ref": "#/components/parameters/sortBy"
        }],
        "responses": {
          "200": {
            "description": "List of formulas that have names in a doc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormulaList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          }
        },
        "x-code-samples": [{
          "label": "Python 3.7",
          "lang": "python",
          "source": "import requests\n\nheaders = {'Authorization': 'Bearer <your API token>'}\nuri = f'https://coda.io/apis/v1/docs/<doc ID>/formulas'\nres = requests.get(uri, headers=headers).json()\n\nprint(f'This doc\\'s formulas are: {\", \".join(i[\"name\"] for i in res[\"items\"])}')\n# => This doc's formulas are: Total Duration, Time Now\n"
        }, {
          "label": "Shell",
          "lang": "shell",
          "source": "curl -s -H 'Authorization: Bearer <your API token>' \\\n  'https://coda.io/apis/v1/docs/<doc ID>/formulas' |\n  jq '.items | map(.name) | join(\", \")'\n# => \"Total Duration, Time Now\"\n"
        }, {
          "label": "Google Apps Script",
          "lang": "javascript",
          "source": "// Import the CodaAPI library via Resource->Libraries...:\n// 15IQuWOk8MqT50FDWomh57UqWGH23gjsWVWYFms3ton6L-UHmefYHS9Vl\nCodaAPI.authenticate('<your API token>');\nvar formulas = CodaAPI.listFormulas('<doc ID>').items;\nvar names = formulas.map(function(formula) { return formula.name; });\nLogger.log('This doc\\'s formulas are: ' + names.join(', '));\n// => This doc's formulas are: Total Duration, Time Now\n"
        }]
      }
    },
    "/docs/{docId}/formulas/{formulaIdOrName}": {
      "get": {
        "summary": "Get a formula",
        "description": "Returns info on a formula.",
        "operationId": "getFormula",
        "tags": ["Formulas"],
        "parameters": [{
          "$ref": "#/components/parameters/docId"
        }, {
          "$ref": "#/components/parameters/formulaIdOrName"
        }],
        "responses": {
          "200": {
            "description": "Details about a formula.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Formula"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          }
        },
        "x-code-samples": [{
          "label": "Python 3.7",
          "lang": "python",
          "source": "import requests\n\nheaders = {'Authorization': 'Bearer <your API token>'}\nuri = f'https://coda.io/apis/v1/docs/<doc ID>/formulas/<formula ID>'\nres = requests.get(uri, headers=headers).json()\n\nprint(f'It will take {res[\"value\"]} hours to complete everything')\n# => It will take 3 hours to complete everything\n"
        }, {
          "label": "Shell",
          "lang": "shell",
          "source": "curl -s -H 'Authorization: Bearer <your API token>' \\\n  'https://coda.io/apis/v1/docs/<doc ID>/formulas/<formula ID>' |\n  jq '\"It will take \" + (.value | tostring) + \" hours to complete everything\"'\n# => \"It will take 3 hours to complete everything\"\n"
        }, {
          "label": "Google Apps Script",
          "lang": "javascript",
          "source": "// Import the CodaAPI library via Resource->Libraries...:\n// 15IQuWOk8MqT50FDWomh57UqWGH23gjsWVWYFms3ton6L-UHmefYHS9Vl\nCodaAPI.authenticate('<your API token>');\nvar formula = CodaAPI.getFormula('<doc ID>', '<formula ID>');\nLogger.log('It will take ' + formula.value + ' hours to complete everything');\n// => It will take 3 hours to complete everything\n"
        }]
      }
    },
    "/docs/{docId}/controls": {
      "get": {
        "summary": "List controls",
        "description": "Returns a list of controls in a Coda doc.",
        "operationId": "listControls",
        "tags": ["Controls"],
        "parameters": [{
          "$ref": "#/components/parameters/docId"
        }, {
          "$ref": "#/components/parameters/limit"
        }, {
          "$ref": "#/components/parameters/pageToken"
        }, {
          "$ref": "#/components/parameters/sortBy"
        }],
        "responses": {
          "200": {
            "description": "List of controls in a doc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ControlList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          }
        },
        "x-code-samples": [{
          "label": "Python 3.7",
          "lang": "python",
          "source": "import requests\n\nheaders = {'Authorization': 'Bearer <your API token>'}\nuri = f'https://coda.io/apis/v1/docs/<doc ID>/controls'\nres = requests.get(uri, headers=headers).json()\n\nprint(f'Controls here are: {\", \".join(i[\"name\"] for i in res[\"items\"])}')\n# => Controls here are: Control 1, Control 2\n"
        }, {
          "label": "Shell",
          "lang": "shell",
          "source": "curl -s -H 'Authorization: Bearer <your API token>' \\\n  'https://coda.io/apis/v1/docs/<doc ID>/controls' |\n  jq '.items | map(.name) | join(\", \")'\n# => \"Control 1, Control 2\"\n"
        }, {
          "label": "Google Apps Script",
          "lang": "javascript",
          "source": "// Import the CodaAPI library via Resource->Libraries...:\n// 15IQuWOk8MqT50FDWomh57UqWGH23gjsWVWYFms3ton6L-UHmefYHS9Vl\nCodaAPI.authenticate('<your API token>');\nvar controls = CodaAPI.listControls('<doc ID>').items;\nvar names = controls.map(function(control) { return control.name; });\nLogger.log('Controls here are: ' + names.join(', '));\n// => Controls here are: Control 1, Control 2\n"
        }]
      }
    },
    "/docs/{docId}/controls/{controlIdOrName}": {
      "get": {
        "summary": "Get a control",
        "description": "Returns info on a control.",
        "operationId": "getControl",
        "tags": ["Controls"],
        "parameters": [{
          "$ref": "#/components/parameters/docId"
        }, {
          "$ref": "#/components/parameters/controlIdOrName"
        }],
        "responses": {
          "200": {
            "description": "Details about a control.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Control"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          }
        },
        "x-code-samples": [{
          "label": "Python 3.7",
          "lang": "python",
          "source": "import requests\n\nheaders = {'Authorization': 'Bearer <your API token>'}\nuri = f'https://coda.io/apis/v1/docs/<doc ID>/controls/<control ID>'\nres = requests.get(uri, headers=headers).json()\n\nprint(f'The control is a {res[\"controlType\"]}')\n# => The control is a slider\n"
        }, {
          "label": "Shell",
          "lang": "shell",
          "source": "curl -s -H 'Authorization: Bearer <your API token>' \\\n  'https://coda.io/apis/v1/docs/<doc ID>/controls/<control ID>' |\n  jq '\"The control is a \" + .controlType'\n# => \"The control is a slider\"\n"
        }, {
          "label": "Google Apps Script",
          "lang": "javascript",
          "source": "// Import the CodaAPI library via Resource->Libraries...:\n// 15IQuWOk8MqT50FDWomh57UqWGH23gjsWVWYFms3ton6L-UHmefYHS9Vl\nCodaAPI.authenticate('<your API token>');\nvar control = CodaAPI.getControl('<doc ID>', '<control ID>');\nLogger.log('The control is a ' + control.controlType);\n// => The control is a slider\n"
        }]
      }
    },
    "/whoami": {
      "get": {
        "summary": "Get user info",
        "description": "Returns basic info about the current user.",
        "operationId": "whoami",
        "tags": ["Account"],
        "responses": {
          "200": {
            "description": "Info about the current user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          }
        },
        "x-code-samples": [{
          "label": "Python 3.7",
          "lang": "python",
          "source": "import requests\n\nheaders = {'Authorization': 'Bearer <your API token>'}\nuri = 'https://coda.io/apis/v1/whoami'\nres = requests.get(uri, headers=headers).json()\n\nprint(f'Your name is {res[\"name\"]}')\n# => Your name is John Doe\n"
        }, {
          "label": "Shell",
          "lang": "shell",
          "source": "curl -s -H 'Authorization: Bearer <your API token>' \\\n  'https://coda.io/apis/v1/whoami' |\n  jq .name\n# => \"John Doe\"\n"
        }, {
          "label": "Google Apps Script",
          "lang": "javascript",
          "source": "// Import the CodaAPI library via Resource->Libraries...:\n// 15IQuWOk8MqT50FDWomh57UqWGH23gjsWVWYFms3ton6L-UHmefYHS9Vl\nCodaAPI.authenticate('<your API token>');\nLogger.log('Your name is ' + CodaAPI.whoami().name);\n// => Your name is John Doe\n"
        }]
      }
    },
    "/resolveBrowserLink": {
      "get": {
        "summary": "Resolve browser link",
        "description": "Given a browser link to a Coda object, attempts to find it and return metadata that can be used to get more info on it. Returns a 400 if the URL does not appear to be a Coda URL or a 404 if the resource cannot be located with the current credentials.\n",
        "operationId": "resolveBrowserLink",
        "tags": ["Miscellaneous"],
        "parameters": [{
          "name": "url",
          "description": "The browser link to try to resolve.",
          "in": "query",
          "required": true,
          "example": "https://coda.io/d/_dAbCDeFGH/Launch-Status_sumnO",
          "schema": {
            "type": "string",
            "format": "url"
          }
        }, {
          "name": "degradeGracefully",
          "description": "By default, attempting to resolve the Coda URL of a deleted object will result in an error. If this flag is set, the next-available object, all the way up to the doc itself, will be resolved.\n",
          "in": "query",
          "example": true,
          "schema": {
            "type": "boolean"
          }
        }],
        "responses": {
          "200": {
            "description": "Metadata for the resolved resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLink"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          }
        },
        "x-pack-hidden": true,
        "x-code-samples": [{
          "label": "Python 3.7",
          "lang": "python",
          "source": "import requests\n\nheaders = {'Authorization': 'Bearer <your API token>'}\nuri = 'https://coda.io/apis/v1/resolveBrowserLink'\nparams = {\n  'url': 'https://coda.io/d/Some-Doc_d<doc ID>/#To-do-List_tu<table ID>',\n}\nres = requests.get(uri, headers=headers, params=params).json()\nresolved_uri = res[\"resource\"][\"href\"]\n\nres = requests.get(resolved_uri, headers=headers).json()\nprint(f'This link points to a {res[\"type\"]} named {res[\"name\"]}')\n# => This link points to a table named To-do List\n"
        }, {
          "label": "Shell",
          "lang": "shell",
          "source": "RESOLVED_RESOURCE_URI=\"$(curl -s -H 'Authorization: Bearer <your API token>' \\\n  -G --data-urlencode 'url=https://coda.io/d/Some-Doc_d<doc ID>/#To-do-List_tu<table ID>' \\\n  'https://coda.io/apis/v1/resolveBrowserLink' |\n  jq -r '.resource.href')\"\ncurl -s -H 'Authorization: Bearer <your API token>' \\\n  \"$RESOLVED_RESOURCE_URI\" |\n  jq '\"This link points to a \" + .type + \" named \" + .name'\n# => \"This link points to a table named To-do List\"\n"
        }, {
          "label": "Google Apps Script",
          "lang": "javascript",
          "source": "// Import the CodaAPI library via Resource->Libraries...:\n// 15IQuWOk8MqT50FDWomh57UqWGH23gjsWVWYFms3ton6L-UHmefYHS9Vl\nCodaAPI.authenticate('<your API token>');\n\nvar url = 'https://coda.io/d/Some-Doc_d<doc ID>/#To-do-List_tu<table ID>';\nvar res = CodaAPI.resolveBrowserLink({url: url});\nLogger.log('This link points to a ' + res.type + ' named ' + res.name);\n// => This link points to a table named To-do List\n"
        }]
      }
    },
    "/mutationStatus/{requestId}": {
      "get": {
        "summary": "Get mutation status",
        "description": "Get the status for an asynchronous mutation to know whether or not it has been completed. Each API endpoint that mutates a document will return a request id that you can pass to this endpoint to check the completion status. Status information is not guaranteed to be available for more than one day after the mutation was completed. It is intended to be used shortly after the request was made.\n",
        "operationId": "getMutationStatus",
        "tags": ["Miscellaneous"],
        "parameters": [{
          "$ref": "#/components/parameters/requestId"
        }],
        "responses": {
          "200": {
            "description": "Info about the mutation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MutationStatus"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          }
        },
        "x-code-samples": [{
          "label": "Python 3.7",
          "lang": "python",
          "source": "import requests\n\nheaders = {'Authorization': 'Bearer <your API token>'}\nuri = 'https://coda.io/apis/v1/mutationStatus/some-request-id'\nres = requests.get(uri, headers=headers).json()\n\nprint(f'Request has completed? {res[\"completed\"]}')\n# => Request has completed? false\n"
        }, {
          "label": "Shell",
          "lang": "shell",
          "source": "curl -s -H 'Authorization: Bearer <your API token>' \\\n  'https://coda.io/apis/v1/mutationStatus/some-request-id' |\n  jq .completed\n# => true\n"
        }, {
          "label": "Google Apps Script",
          "lang": "javascript",
          "source": "// Import the CodaAPI library via Resource->Libraries...:\n// 15IQuWOk8MqT50FDWomh57UqWGH23gjsWVWYFms3ton6L-UHmefYHS9Vl\nCodaAPI.authenticate('<your API token>');\nLogger.log('Request has completed? ' + CodaAPI.mutationStatus('some-request-id').completed);\n// => Request has completed? false\n"
        }]
      }
    }
  },
  "components": {
    "schemas": {
      "Type": {
        "x-schema-name": "Type",
        "description": "A constant identifying the type of the resource.",
        "type": "string",
        "enum": ["doc", "aclPermissions", "aclMetadata", "user", "apiLink", "page", "table", "row", "column", "formula", "control", "mutationStatus"],
        "x-tsEnumNames": ["Doc", "AclPermissions", "AclMetadata", "User", "ApiLink", "Page", "Table", "Row", "Column", "Formula", "Control", "MutationStatus"]
      },
      "PrincipalType": {
        "x-schema-name": "PrincipalType",
        "description": "Type of principal.",
        "type": "string",
        "enum": ["email", "domain", "anyone"],
        "x-tsEnumNames": ["Email", "Domain", "Anyone"]
      },
      "Principal": {
        "x-schema-name": "Principal",
        "description": "Metadata about a principal.",
        "oneOf": [{
          "$ref": "#/components/schemas/EmailPrincipal"
        }, {
          "$ref": "#/components/schemas/DomainPrincipal"
        }, {
          "$ref": "#/components/schemas/AnyonePrincipal"
        }],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "email": "#/components/schemas/EmailPrincipal",
            "domain": "#/components/schemas/DomainPrincipal",
            "anyone": "#/components/schemas/AnyonePrincipal"
          }
        }
      },
      "EmailPrincipal": {
        "type": "object",
        "required": ["email", "type"],
        "additionalProperties": false,
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PrincipalType"
          },
          "email": {
            "type": "string",
            "description": "Email for the principal.",
            "example": "example@domain.com"
          }
        }
      },
      "DomainPrincipal": {
        "type": "object",
        "required": ["domain", "type"],
        "additionalProperties": false,
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PrincipalType"
          },
          "domain": {
            "type": "string",
            "description": "Domain for the principal.",
            "example": "domain.com"
          }
        }
      },
      "AnyonePrincipal": {
        "type": "object",
        "required": ["type"],
        "additionalProperties": false,
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PrincipalType"
          }
        }
      },
      "AccessType": {
        "x-schema-name": "AccessType",
        "description": "Type of access.",
        "type": "string",
        "enum": ["readonly", "write", "comment", "none"],
        "x-tsEnumNames": ["ReadOnly", "Write", "Comment", "None"]
      },
      "Permission": {
        "x-schema-name": "Permission",
        "description": "A specific premission granted to a principal.",
        "type": "object",
        "required": ["principal", "id", "access"],
        "additionalProperties": false,
        "properties": {
          "principal": {
            "$ref": "#/components/schemas/Principal"
          },
          "id": {
            "type": "string",
            "description": "Id for the Permission"
          },
          "access": {
            "$ref": "#/components/schemas/AccessType"
          }
        }
      },
      "AddPermission": {
        "x-schema-name": "AddPermission",
        "description": "Payload for granting a new permission.",
        "type": "object",
        "required": ["access", "principal"],
        "additionalProperties": false,
        "properties": {
          "access": {
            "$ref": "#/components/schemas/AccessType"
          },
          "principal": {
            "$ref": "#/components/schemas/Principal"
          },
          "suppressEmail": {
            "type": "boolean",
            "description": "When true suppresses email notification"
          }
        }
      },
      "Acl": {
        "x-schema-name": "Acl",
        "description": "List of Permissions.",
        "type": "object",
        "required": ["items", "href"],
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          },
          "href": {
            "type": "string",
            "format": "url",
            "description": "API link to these results",
            "example": "https://coda.io/apis/v1/docs/AbCDeFGH/acl?limit=20"
          },
          "nextPageToken": {
            "$ref": "#/components/schemas/nextPageToken"
          },
          "nextPageLink": {
            "allOf": [{
              "$ref": "#/components/schemas/nextPageLink"
            }, {
              "type": "string",
              "example": "https://coda.io/apis/v1/docs/AbCDeFGH/acl?limit=20&pageToken=20"
            }]
          }
        }
      },
      "AclMetadata": {
        "x-schema-name": "Acl",
        "description": "Doc level metadata associated with ACL.",
        "type": "object",
        "required": ["canShare", "canShareWithOrg"],
        "additionalProperties": false,
        "properties": {
          "canShare": {
            "type": "boolean",
            "description": "When true, the user of the api can share"
          },
          "canShareWithOrg": {
            "type": "boolean",
            "description": "When true, the user of the api can share with the org"
          }
        }
      },
      "AddPermissionResult": {
        "x-schema-name": "AddPermissionResult",
        "description": "The result of sharing a doc.",
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "DeletePermissionResult": {
        "x-schema-name": "DeletePermissionResult",
        "description": "The result of deleting a permission.",
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "DocReference": {
        "x-schema-name": "DocReference",
        "description": "Reference to a Coda doc.",
        "type": "object",
        "required": ["id", "type", "browserLink", "href"],
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the Coda doc.",
            "example": "AbCDeFGH"
          },
          "type": {
            "type": "string",
            "description": "The type of this resource.",
            "enum": ["doc"]
          },
          "href": {
            "type": "string",
            "format": "url",
            "description": "API link to the Coda doc.",
            "example": "https://coda.io/apis/v1/docs/AbCDeFGH"
          },
          "browserLink": {
            "type": "string",
            "format": "url",
            "description": "Browser-friendly link to the Coda doc.",
            "example": "https://coda.io/d/_dAbCDeFGH"
          }
        }
      },
      "Doc": {
        "x-schema-name": "Doc",
        "description": "Metadata about a Coda doc.",
        "type": "object",
        "required": ["id", "type", "href", "browserLink", "name", "owner", "ownerName", "createdAt", "updatedAt"],
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the Coda doc.",
            "example": "AbCDeFGH"
          },
          "type": {
            "type": "string",
            "description": "The type of this resource.",
            "enum": ["doc"]
          },
          "href": {
            "type": "string",
            "format": "url",
            "description": "API link to the Coda doc.",
            "example": "https://coda.io/apis/v1/docs/AbCDeFGH"
          },
          "browserLink": {
            "type": "string",
            "format": "url",
            "description": "Browser-friendly link to the Coda doc.",
            "example": "https://coda.io/d/_dAbCDeFGH"
          },
          "icon": {
            "$ref": "#/components/schemas/Icon"
          },
          "name": {
            "type": "string",
            "description": "Name of the doc.",
            "example": "Product Launch Hub"
          },
          "owner": {
            "type": "string",
            "format": "email",
            "description": "Email address of the doc owner.",
            "example": "user@example.com"
          },
          "ownerName": {
            "type": "string",
            "description": "Name of the doc owner.",
            "example": "Some User"
          },
          "docSize": {
            "$ref": "#/components/schemas/DocSize"
          },
          "sourceDoc": {
            "allOf": [{
              "type": "object",
              "description": "Reference to a Coda doc from which this doc was copied, if any.",
              "additionalProperties": false
            }, {
              "$ref": "#/components/schemas/DocReference"
            }]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp for when the doc was created.",
            "example": "2018-04-11T00:18:57.946Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp for when the doc was last modified.",
            "example": "2018-04-11T00:18:57.946Z"
          },
          "published": {
            "$ref": "#/components/schemas/DocPublished"
          }
        }
      },
      "DocCategory": {
        "x-schema-name": "DocCategory",
        "type": "object",
        "description": "The category applied to a doc.",
        "required": ["name"],
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the category.",
            "example": "Project Management"
          }
        }
      },
      "DocCategoryList": {
        "x-schema-name": "DocCategoryList",
        "type": "object",
        "description": "A list of categories that can be applied to a doc.",
        "required": ["items"],
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "description": "Categories for the doc.",
            "example": ["Project Management"],
            "items": {
              "$ref": "#/components/schemas/DocCategory"
            }
          }
        }
      },
      "DocList": {
        "x-schema-name": "DocList",
        "description": "List of Coda docs.",
        "type": "object",
        "required": ["items"],
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Doc"
            }
          },
          "href": {
            "type": "string",
            "format": "url",
            "description": "API link to these results",
            "example": "https://coda.io/apis/v1/docs?limit=20"
          },
          "nextPageToken": {
            "$ref": "#/components/schemas/nextPageToken"
          },
          "nextPageLink": {
            "allOf": [{
              "$ref": "#/components/schemas/nextPageLink"
            }, {
              "type": "string",
              "example": "https://coda.io/apis/v1/docs?limit=20&pageToken=20"
            }]
          }
        }
      },
      "DocCreate": {
        "x-schema-name": "DocCreate",
        "description": "Payload for creating a new doc.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the new doc. Defaults to 'Untitled'.",
            "example": "Project Tracker"
          },
          "sourceDoc": {
            "type": "string",
            "description": "An optional doc ID from which to create a copy.",
            "example": "iJKlm_noPq"
          },
          "timezone": {
            "type": "string",
            "description": "The timezone to use for the newly created doc.",
            "example": "America/Los_Angeles"
          },
          "folderId": {
            "type": "string",
            "description": "The ID of the folder within which to create this doc. Defaults to your \"My Docs\" folder in the oldest workspace you joined; this is subject to change. You can get this ID by opening the folder in the docs list on your computer and grabbing the `folderId` query parameter.\n",
            "example": "fl-ABcdEFgHJi"
          }
        }
      },
      "DocDelete": {
        "x-schema-name": "DocDelete",
        "description": "The result of a doc deletion.",
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "DocSize": {
        "x-schema-name": "DocSize",
        "description": "The number of components within a Coda doc.",
        "type": "object",
        "required": ["totalRowCount", "tableAndViewCount", "pageCount", "overApiSizeLimit"],
        "additionalProperties": false,
        "properties": {
          "totalRowCount": {
            "type": "number",
            "description": "The number of rows contained within all tables of the doc.",
            "example": 31337
          },
          "tableAndViewCount": {
            "type": "number",
            "description": "The total number of tables and views contained within the doc.",
            "example": 42
          },
          "pageCount": {
            "type": "number",
            "description": "The total number of page contained within the doc.",
            "example": 10
          },
          "overApiSizeLimit": {
            "type": "boolean",
            "description": "If true, indicates that the doc is over the API size limit.",
            "example": false
          }
        }
      },
      "DocPublish": {
        "x-schema-name": "DocPublish",
        "description": "Payload for publishing a doc or or updating its publishing information.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "slug": {
            "type": "string",
            "description": "Slug for the published doc.",
            "example": "my-doc"
          },
          "discoverable": {
            "type": "boolean",
            "description": "If true, indicates that the doc is discoverable.",
            "example": true
          },
          "earnCredit": {
            "type": "boolean",
            "description": "If true, new users may be required to sign in to view content within this document. You will receive Coda credit for each user who signs up via your doc.\n",
            "example": true
          },
          "categoryNames": {
            "type": "array",
            "description": "The names of categories to apply to the document.",
            "example": ["Project Management"],
            "items": {
              "type": "string"
            }
          },
          "mode": {
            "$ref": "#/components/schemas/DocPublishMode"
          }
        }
      },
      "DocPublished": {
        "x-schema-name": "DocPublished",
        "description": "Information about the publishing state of the document.",
        "type": "object",
        "required": ["browserLink", "discoverable", "earnCredit", "mode", "categories"],
        "additionalProperties": false,
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the published doc.",
            "example": "Hello World!"
          },
          "browserLink": {
            "type": "string",
            "description": "URL to the published doc.",
            "example": "https://coda.io/@coda/hello-world"
          },
          "imageLink": {
            "type": "string",
            "description": "URL to the cover image for the published doc."
          },
          "discoverable": {
            "type": "boolean",
            "description": "If true, indicates that the doc is discoverable.",
            "example": true
          },
          "earnCredit": {
            "type": "boolean",
            "description": "If true, new users may be required to sign in to view content within this document. You will receive Coda credit for each user who signs up via your doc.\n",
            "example": true
          },
          "mode": {
            "$ref": "#/components/schemas/DocPublishMode"
          },
          "categories": {
            "type": "array",
            "description": "Categories applied to the doc.",
            "example": ["Project Management"],
            "items": {
              "$ref": "#/components/schemas/DocCategory"
            }
          }
        }
      },
      "DocPublishMode": {
        "x-schema-name": "PublishMode",
        "description": "A time unit used as part of a duration value.",
        "type": "string",
        "enum": ["view", "play", "edit"],
        "x-tsEnumNames": ["View", "Play", "Edit"]
      },
      "PublishResult": {
        "x-schema-name": "PublishResult",
        "description": "The result of publishing a doc.",
        "allOf": [{
          "$ref": "#/components/schemas/DocumentMutateResponse"
        }, {
          "type": "object",
          "additionalProperties": false,
          "properties": {}
        }]
      },
      "UnpublishResult": {
        "x-schema-name": "UnpublishResult",
        "description": "The result of unpublishing a doc.",
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "PageReference": {
        "x-schema-name": "PageReference",
        "description": "Reference to a page.",
        "type": "object",
        "required": ["id", "type", "browserLink", "href", "name"],
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the page.",
            "example": "canvas-IjkLmnO"
          },
          "type": {
            "type": "string",
            "description": "The type of this resource.",
            "enum": ["page"]
          },
          "href": {
            "type": "string",
            "format": "url",
            "description": "API link to the page.",
            "example": "https://coda.io/apis/v1/docs/AbCDeFGH/pages/canvas-IjkLmnO"
          },
          "browserLink": {
            "type": "string",
            "format": "url",
            "description": "Browser-friendly link to the page.",
            "example": "https://coda.io/d/_dAbCDeFGH/Launch-Status_sumnO"
          },
          "name": {
            "type": "string",
            "description": "Name of the page.",
            "example": "Launch Status"
          }
        }
      },
      "Page": {
        "x-schema-name": "Page",
        "description": "Metadata about a page.",
        "type": "object",
        "required": ["id", "type", "href", "name", "browserLink", "children"],
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the page.",
            "example": "canvas-IjkLmnO"
          },
          "type": {
            "type": "string",
            "description": "The type of this resource.",
            "enum": ["page"]
          },
          "href": {
            "type": "string",
            "format": "url",
            "description": "API link to the page.",
            "example": "https://coda.io/apis/v1/docs/AbCDeFGH/pages/canvas-IjkLmnO"
          },
          "browserLink": {
            "type": "string",
            "format": "url",
            "description": "Browser-friendly link to the page.",
            "example": "https://coda.io/d/_dAbCDeFGH/Launch-Status_sumnO"
          },
          "name": {
            "type": "string",
            "description": "Name of the page.",
            "example": "Launch Status"
          },
          "subtitle": {
            "type": "string",
            "description": "Subtitle of the page.",
            "example": "See the status of launch-related tasks."
          },
          "icon": {
            "$ref": "#/components/schemas/Icon"
          },
          "image": {
            "$ref": "#/components/schemas/Image"
          },
          "parent": {
            "$ref": "#/components/schemas/PageReference"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PageReference"
            }
          }
        }
      },
      "PageList": {
        "x-schema-name": "PageList",
        "description": "List of pages.",
        "type": "object",
        "required": ["items"],
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Page"
            }
          },
          "href": {
            "type": "string",
            "format": "url",
            "description": "API link to these results",
            "example": "https://coda.io/apis/v1/docs/AbCDeFGH/pages?limit=20"
          },
          "nextPageToken": {
            "$ref": "#/components/schemas/nextPageToken"
          },
          "nextPageLink": {
            "allOf": [{
              "$ref": "#/components/schemas/nextPageLink"
            }, {
              "type": "string",
              "example": "https://coda.io/apis/v1/docs/AbCDeFGH/pages?limit=20&pageToken=20"
            }]
          }
        }
      },
      "PageUpdate": {
        "x-schema-name": "PageUpdate",
        "description": "Payload for updating a page.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the page.",
            "example": "Launch Status"
          },
          "subtitle": {
            "type": "string",
            "description": "Subtitle of the page.",
            "example": "See the status of launch-related tasks."
          },
          "iconName": {
            "type": "string",
            "description": "Name of the icon.",
            "example": "rocket"
          },
          "imageUrl": {
            "type": "string",
            "description": "Url of the image to use.",
            "example": "https://example.com/image.jpg"
          }
        }
      },
      "PageUpdateResult": {
        "x-schema-name": "PageUpdateResult",
        "description": "The result of a page update.",
        "allOf": [{
          "$ref": "#/components/schemas/DocumentMutateResponse"
        }, {
          "type": "object",
          "required": ["id"],
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "string",
              "description": "ID of the updated page.",
              "example": "canvas-tuVwxYz"
            }
          }
        }]
      },
      "Layout": {
        "x-schema-name": "Layout",
        "description": "Layout type of the table or view.",
        "type": "string",
        "enum": ["default", "areaChart", "barChart", "bubbleChart", "calendar", "card", "ganttChart", "lineChart", "masterDetail", "pieChart", "scatterChart", "slide", "wordCloud"],
        "x-tsEnumNames": ["Default", "AreaChart", "BarChart", "BubbleChart", "Calendar", "Card", "GanttChart", "LineChart", "MasterDetail", "PieChart", "ScatterChart", "Slide", "WordCloud"]
      },
      "Sort": {
        "x-schema-name": "Sort",
        "description": "A sort applied to a table or view.",
        "type": "object",
        "required": ["column", "direction"],
        "additionalProperties": false,
        "properties": {
          "column": {
            "$ref": "#/components/schemas/ColumnReference"
          },
          "direction": {
            "$ref": "#/components/schemas/SortDirection"
          }
        }
      },
      "SortDirection": {
        "description": "Direction of a sort for a table or view.",
        "type": "string",
        "enum": ["ascending", "descending"],
        "x-tsEnumNames": ["Ascending", "Descending"]
      },
      "DocumentMutateResponse": {
        "x-schema-name": "DocumentMutateResponse",
        "description": "Base response type for an operation that mutates a document.",
        "type": "object",
        "additionalProperties": false,
        "required": ["requestId"],
        "properties": {
          "requestId": {
            "type": "string",
            "description": "An arbitrary unique identifier for this request.",
            "example": "abc-123-def-456"
          }
        }
      },
      "TableReference": {
        "x-schema-name": "TableReference",
        "description": "Reference to a table or view.",
        "type": "object",
        "required": ["id", "type", "tableType", "browserLink", "href", "name"],
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the table.",
            "example": "grid-pqRst-U"
          },
          "type": {
            "type": "string",
            "description": "The type of this resource.",
            "enum": ["table"]
          },
          "tableType": {
            "$ref": "#/components/schemas/TableType"
          },
          "href": {
            "type": "string",
            "format": "url",
            "description": "API link to the table.",
            "example": "https://coda.io/apis/v1/docs/AbCDeFGH/tables/grid-pqRst-U"
          },
          "browserLink": {
            "type": "string",
            "format": "url",
            "description": "Browser-friendly link to the table.",
            "example": "https://coda.io/d/_dAbCDeFGH/#Teams-and-Tasks_tpqRst-U"
          },
          "name": {
            "type": "string",
            "description": "Name of the table.",
            "example": "Tasks"
          },
          "parent": {
            "$ref": "#/components/schemas/PageReference"
          }
        }
      },
      "Table": {
        "x-schema-name": "Table",
        "description": "Metadata about a table.",
        "type": "object",
        "required": ["id", "type", "tableType", "href", "name", "parent", "browserLink", "displayColumn", "rowCount", "sorts", "layout", "createdAt", "updatedAt"],
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the table.",
            "example": "grid-pqRst-U"
          },
          "type": {
            "type": "string",
            "description": "The type of this resource.",
            "enum": ["table"]
          },
          "tableType": {
            "$ref": "#/components/schemas/TableType"
          },
          "href": {
            "type": "string",
            "format": "url",
            "description": "API link to the table.",
            "example": "https://coda.io/apis/v1/docs/AbCDeFGH/tables/grid-pqRst-U"
          },
          "browserLink": {
            "type": "string",
            "format": "url",
            "description": "Browser-friendly link to the table.",
            "example": "https://coda.io/d/_dAbCDeFGH/#Teams-and-Tasks_tpqRst-U"
          },
          "name": {
            "type": "string",
            "description": "Name of the table.",
            "example": "Tasks"
          },
          "parent": {
            "$ref": "#/components/schemas/PageReference"
          },
          "parentTable": {
            "$ref": "#/components/schemas/TableReference"
          },
          "displayColumn": {
            "$ref": "#/components/schemas/ColumnReference"
          },
          "rowCount": {
            "type": "integer",
            "description": "Total number of rows in the table.",
            "example": 130
          },
          "sorts": {
            "type": "array",
            "description": "Any sorts applied to the table.",
            "items": {
              "$ref": "#/components/schemas/Sort"
            }
          },
          "layout": {
            "$ref": "#/components/schemas/Layout"
          },
          "filter": {
            "allOf": [{
              "description": "Detailed information about the filter formula for the table, if applicable.",
              "additionalProperties": false
            }, {
              "$ref": "#/components/schemas/FormulaDetail"
            }]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp for when the table was created.",
            "example": "2018-04-11T00:18:57.946Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp for when the table was last modified.",
            "example": "2018-04-11T00:18:57.946Z"
          }
        }
      },
      "TableList": {
        "x-schema-name": "TableList",
        "description": "List of tables.",
        "type": "object",
        "required": ["items"],
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TableReference"
            }
          },
          "href": {
            "type": "string",
            "format": "url",
            "description": "API link to these results",
            "example": "https://coda.io/apis/v1/docs/AbCDeFGH/tables?limit=20"
          },
          "nextPageToken": {
            "$ref": "#/components/schemas/nextPageToken"
          },
          "nextPageLink": {
            "allOf": [{
              "$ref": "#/components/schemas/nextPageLink"
            }, {
              "type": "string",
              "example": "https://coda.io/apis/v1/docs/AbCDeFGH/tables?limit=20&pageToken=20"
            }]
          }
        }
      },
      "ColumnReference": {
        "x-schema-name": "ColumnReference",
        "description": "Reference to a column.",
        "type": "object",
        "required": ["id", "type", "href"],
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the column.",
            "example": "c-tuVwxYz"
          },
          "type": {
            "type": "string",
            "description": "The type of this resource.",
            "enum": ["column"]
          },
          "href": {
            "type": "string",
            "format": "url",
            "description": "API link to the column.",
            "example": "https://coda.io/apis/v1/docs/AbCDeFGH/tables/grid-pqRst-U/columns/c-tuVwxYz"
          }
        }
      },
      "Column": {
        "x-schema-name": "Column",
        "description": "Info about a column.",
        "type": "object",
        "required": ["id", "type", "href", "name", "format"],
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the column.",
            "example": "c-tuVwxYz"
          },
          "type": {
            "type": "string",
            "description": "The type of this resource.",
            "enum": ["column"]
          },
          "href": {
            "type": "string",
            "format": "url",
            "description": "API link to the column.",
            "example": "https://coda.io/apis/v1/docs/AbCDeFGH/tables/grid-pqRst-U/columns/c-tuVwxYz"
          },
          "name": {
            "type": "string",
            "description": "Name of the column.",
            "example": "Completed"
          },
          "display": {
            "type": "boolean",
            "description": "Whether the column is the display column.",
            "example": true
          },
          "calculated": {
            "type": "boolean",
            "description": "Whether the column has a formula set on it.",
            "example": true
          },
          "format": {
            "$ref": "#/components/schemas/ColumnFormat"
          }
        }
      },
      "ColumnDetail": {
        "x-schema-name": "ColumnDetail",
        "description": "Info about a column.",
        "type": "object",
        "required": ["id", "type", "href", "name", "parent", "format"],
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the column.",
            "example": "c-tuVwxYz"
          },
          "type": {
            "type": "string",
            "description": "The type of this resource.",
            "enum": ["column"]
          },
          "href": {
            "type": "string",
            "format": "url",
            "description": "API link to the column.",
            "example": "https://coda.io/apis/v1/docs/AbCDeFGH/tables/grid-pqRst-U/columns/c-tuVwxYz"
          },
          "name": {
            "type": "string",
            "description": "Name of the column.",
            "example": "Completed"
          },
          "display": {
            "type": "boolean",
            "description": "Whether the column is the display column.",
            "example": true
          },
          "calculated": {
            "type": "boolean",
            "description": "Whether the column has a formula set on it.",
            "example": true
          },
          "format": {
            "$ref": "#/components/schemas/ColumnFormat"
          },
          "parent": {
            "$ref": "#/components/schemas/TableReference"
          }
        }
      },
      "SimpleColumnFormat": {
        "x-schema-name": "SimpleColumnFormat",
        "description": "Format of a simple column.",
        "type": "object",
        "required": ["type", "isArray"],
        "additionalProperties": false,
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ColumnFormatType"
          },
          "isArray": {
            "type": "boolean",
            "description": "Whether or not this column is an array.",
            "example": true
          }
        }
      },
      "ReferenceColumnFormat": {
        "x-schema-name": "ReferenceColumnFormat",
        "description": "Format of a column that refers to another table.",
        "allOf": [{
          "$ref": "#/components/schemas/SimpleColumnFormat"
        }, {
          "type": "object",
          "additionalProperties": false,
          "required": ["table"],
          "properties": {
            "table": {
              "allOf": [{
                "description": "Reference to the table this column refers to, if applicable.",
                "additionalProperties": false
              }, {
                "$ref": "#/components/schemas/TableReference"
              }]
            }
          }
        }]
      },
      "NumericColumnFormat": {
        "x-schema-name": "NumericColumnFormat",
        "description": "Format of a numeric column.",
        "allOf": [{
          "$ref": "#/components/schemas/SimpleColumnFormat"
        }, {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "precision": {
              "type": "integer",
              "minimum": 0,
              "maximum": 10,
              "description": "The decimal precision.",
              "example": 2
            },
            "useThousandsSeparator": {
              "type": "boolean",
              "description": "Whether to use a thousands separator (like \",\") to format the numeric value.",
              "example": true
            }
          }
        }]
      },
      "CurrencyColumnFormat": {
        "x-schema-name": "CurrencyColumnFormat",
        "description": "Format of a currency column.",
        "allOf": [{
          "$ref": "#/components/schemas/SimpleColumnFormat"
        }, {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "currencyCode": {
              "type": "string",
              "description": "The currency symbol",
              "example": "$"
            },
            "precision": {
              "type": "integer",
              "minimum": 0,
              "maximum": 10,
              "description": "The decimal precision.",
              "example": 2
            },
            "format": {
              "$ref": "#/components/schemas/CurrencyFormatType"
            }
          }
        }]
      },
      "CurrencyFormatType": {
        "x-schema-name": "CurrencyFormatType",
        "description": "How the numeric value should be formatted (with or without symbol, negative numbers in parens).",
        "type": "string",
        "enum": ["currency", "accounting", "financial"],
        "x-tsEnumNames": ["Currency", "Accounting", "Financial"]
      },
      "DateColumnFormat": {
        "x-schema-name": "DateColumnFormat",
        "description": "Format of a date column.",
        "allOf": [{
          "$ref": "#/components/schemas/SimpleColumnFormat"
        }, {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "format": {
              "type": "string",
              "description": "A format string using Moment syntax: https://momentjs.com/docs/#/displaying/",
              "example": "YYYY-MM-DD"
            }
          }
        }]
      },
      "TimeColumnFormat": {
        "x-schema-name": "TimeColumnFormat",
        "description": "Format of a time column.",
        "allOf": [{
          "$ref": "#/components/schemas/SimpleColumnFormat"
        }, {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "format": {
              "type": "string",
              "description": "A format string using Moment syntax: https://momentjs.com/docs/#/displaying/",
              "example": "h:mm:ss A"
            }
          }
        }]
      },
      "DateTimeColumnFormat": {
        "x-schema-name": "DateTimeColumnFormat",
        "description": "Format of a date column.",
        "allOf": [{
          "$ref": "#/components/schemas/SimpleColumnFormat"
        }, {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "dateFormat": {
              "type": "string",
              "description": "A format string using Moment syntax: https://momentjs.com/docs/#/displaying/",
              "example": "YYYY-MM-DD"
            },
            "timeFormat": {
              "type": "string",
              "description": "A format string using Moment syntax: https://momentjs.com/docs/#/displaying/",
              "example": "h:mm:ss A"
            }
          }
        }]
      },
      "DurationColumnFormat": {
        "x-schema-name": "DurationColumnFormat",
        "description": "Format of a duration column.",
        "allOf": [{
          "$ref": "#/components/schemas/SimpleColumnFormat"
        }, {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "precision": {
              "type": "integer",
              "example": 2
            },
            "maxUnit": {
              "allOf": [{
                "description": "The maximum unit of precision, e.g. \"hours\" if this duration need not include minutes.",
                "additionalProperties": false
              }, {
                "$ref": "#/components/schemas/DurationUnit"
              }]
            }
          }
        }]
      },
      "DurationUnit": {
        "x-schema-name": "DurationUnit",
        "description": "A time unit used as part of a duration value.",
        "type": "string",
        "enum": ["days", "hours", "minutes", "seconds"],
        "x-tsEnumNames": ["Days", "Hours", "Minutes", "Seconds"]
      },
      "NumberOrNumberFormula": {
        "x-schema-name": "NumberOrNumberFormula",
        "description": "A number or a string representing a formula that evaluates to a number.",
        "oneOf": [{
          "type": "number",
          "description": "A numeric value.",
          "example": 1
        }, {
          "type": "string",
          "description": "A formula that evaluates to a numeric value.",
          "example": "5 * 10"
        }]
      },
      "SliderColumnFormat": {
        "x-schema-name": "SliderColumnFormat",
        "description": "Format of a numeric column that renders as a slider.",
        "allOf": [{
          "$ref": "#/components/schemas/SimpleColumnFormat"
        }, {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "minimum": {
              "allOf": [{
                "description": "The minimum allowed value for this slider.",
                "additionalProperties": false
              }, {
                "$ref": "#/components/schemas/NumberOrNumberFormula"
              }]
            },
            "maximum": {
              "allOf": [{
                "description": "The maximum allowed value for this slider.",
                "additionalProperties": false
              }, {
                "$ref": "#/components/schemas/NumberOrNumberFormula"
              }]
            },
            "step": {
              "allOf": [{
                "description": "The step size (numeric increment) for this slider.",
                "additionalProperties": false
              }, {
                "$ref": "#/components/schemas/NumberOrNumberFormula"
              }]
            }
          }
        }]
      },
      "IconSet": {
        "x-schema-name": "IconSet",
        "description": "List of available icon sets.",
        "type": "string",
        "enum": ["star", "circle", "fire", "bug", "diamond", "bell", "thumbsup", "heart", "chili", "smiley", "lightning", "currency", "coffee", "person", "battery", "cocktail", "cloud", "sun", "checkmark", "lightbulb"],
        "x-tsEnumNames": ["Star", "Circle", "Fire", "Bug", "Diamond", "Bell", "ThumbsUp", "Heart", "Chili", "Smiley", "Lightning", "Currency", "Coffee", "Person", "Battery", "Cocktail", "Cloud", "Sun", "Checkmark", "LightBulb"]
      },
      "ScaleColumnFormat": {
        "x-schema-name": "ScaleColumnFormat",
        "description": "Format of a numeric column that renders as a scale, like star ratings.",
        "allOf": [{
          "$ref": "#/components/schemas/SimpleColumnFormat"
        }, {
          "type": "object",
          "additionalProperties": false,
          "required": ["maximum", "icon"],
          "properties": {
            "maximum": {
              "type": "number",
              "description": "The maximum number allowed for this scale.",
              "example": 5
            },
            "icon": {
              "allOf": [{
                "description": "The icon set to use when rendering the scale, e.g. render a 5 star scale.",
                "additionalProperties": false
              }, {
                "$ref": "#/components/schemas/IconSet"
              }]
            }
          }
        }]
      },
      "ColumnFormat": {
        "x-schema-name": "ColumnFormat",
        "description": "Format of a column.",
        "oneOf": [{
          "$ref": "#/components/schemas/DateColumnFormat"
        }, {
          "$ref": "#/components/schemas/DateTimeColumnFormat"
        }, {
          "$ref": "#/components/schemas/DurationColumnFormat"
        }, {
          "$ref": "#/components/schemas/CurrencyColumnFormat"
        }, {
          "$ref": "#/components/schemas/NumericColumnFormat"
        }, {
          "$ref": "#/components/schemas/ReferenceColumnFormat"
        }, {
          "$ref": "#/components/schemas/SimpleColumnFormat"
        }, {
          "$ref": "#/components/schemas/ScaleColumnFormat"
        }, {
          "$ref": "#/components/schemas/SliderColumnFormat"
        }, {
          "$ref": "#/components/schemas/TimeColumnFormat"
        }],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "text": "#/components/schemas/SimpleColumnFormat",
            "person": "#/components/schemas/ReferenceColumnFormat",
            "lookup": "#/components/schemas/ReferenceColumnFormat",
            "number": "#/components/schemas/NumericColumnFormat",
            "percent": "#/components/schemas/NumericColumnFormat",
            "currency": "#/components/schemas/CurrencyColumnFormat",
            "date": "#/components/schemas/DateColumnFormat",
            "dateTime": "#/components/schemas/DateTimeColumnFormat",
            "time": "#/components/schemas/TimeColumnFormat",
            "duration": "#/components/schemas/DurationColumnFormat",
            "slider": "#/components/schemas/SliderColumnFormat",
            "scale": "#/components/schemas/ScaleColumnFormat",
            "image": "#/components/schemas/SimpleColumnFormat",
            "button": "#/components/schemas/SimpleColumnFormat",
            "checkbox": "#/components/schemas/SimpleColumnFormat",
            "select": "#/components/schemas/SimpleColumnFormat",
            "packObject": "#/components/schemas/SimpleColumnFormat",
            "other": "#/components/schemas/SimpleColumnFormat"
          }
        }
      },
      "ColumnFormatType": {
        "x-schema-name": "ColumnFormatType",
        "description": "Format type of the column",
        "type": "string",
        "enum": ["text", "person", "lookup", "number", "percent", "currency", "date", "dateTime", "time", "duration", "slider", "scale", "image", "button", "checkbox", "select", "packObject", "other"],
        "x-tsEnumNames": ["Text", "Person", "Lookup", "Number", "Percent", "Currency", "Date", "DateTime", "Time", "Duration", "Slider", "Scale", "Image", "Button", "Checkbox", "Select", "PackObject", "Other"]
      },
      "ColumnList": {
        "x-schema-name": "ColumnList",
        "description": "List of columns.",
        "type": "object",
        "required": ["items"],
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Column"
            }
          },
          "href": {
            "type": "string",
            "format": "url",
            "description": "API link to these results",
            "example": "https://coda.io/apis/v1/docs/AbCDeFGH/tables/grid-pqRst-U/columns?limit=20"
          },
          "nextPageToken": {
            "$ref": "#/components/schemas/nextPageToken"
          },
          "nextPageLink": {
            "allOf": [{
              "$ref": "#/components/schemas/nextPageLink"
            }, {
              "type": "string",
              "example": "https://coda.io/apis/v1/docs/AbCDeFGH/tables/grid-pqRst-U/columns?limit=20&pageToken=20"
            }]
          }
        }
      },
      "Row": {
        "x-schema-name": "Row",
        "description": "Info about a row.",
        "type": "object",
        "required": ["id", "type", "href", "name", "index", "browserLink", "createdAt", "updatedAt", "values"],
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the row.",
            "example": "i-tuVwxYz"
          },
          "type": {
            "type": "string",
            "description": "The type of this resource.",
            "enum": ["row"]
          },
          "href": {
            "type": "string",
            "format": "url",
            "description": "API link to the row.",
            "example": "https://coda.io/apis/v1/docs/AbCDeFGH/tables/grid-pqRst-U/rows/i-RstUv-W"
          },
          "name": {
            "type": "string",
            "description": "The display name of the row, based on its identifying column.",
            "example": "Apple"
          },
          "index": {
            "type": "integer",
            "description": "Index of the row within the table.",
            "example": 7
          },
          "browserLink": {
            "type": "string",
            "format": "url",
            "description": "Browser-friendly link to the row.",
            "example": "https://coda.io/d/_dAbCDeFGH#Teams-and-Tasks_tpqRst-U/_rui-tuVwxYz"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp for when the row was created.",
            "example": "2018-04-11T00:18:57.946Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp for when the row was last modified.",
            "example": "2018-04-11T00:18:57.946Z"
          },
          "values": {
            "type": "object",
            "description": "Values for a specific row, represented as a hash of column IDs (or names with `useColumnNames`) to values.\n",
            "additionalProperties": {
              "$ref": "#/components/schemas/CellValue"
            },
            "example": {
              "c-tuVwxYz": "Apple",
              "c-bCdeFgh": ["$12.34", "$56.78"]
            }
          }
        }
      },
      "RowDetail": {
        "x-schema-name": "RowDetail",
        "description": "Details about a row.",
        "type": "object",
        "required": ["id", "type", "href", "name", "index", "browserLink", "createdAt", "updatedAt", "values", "parent"],
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the row.",
            "example": "i-tuVwxYz"
          },
          "type": {
            "type": "string",
            "description": "The type of this resource.",
            "enum": ["row"]
          },
          "href": {
            "type": "string",
            "format": "url",
            "description": "API link to the row.",
            "example": "https://coda.io/apis/v1/docs/AbCDeFGH/tables/grid-pqRst-U/rows/i-RstUv-W"
          },
          "name": {
            "type": "string",
            "description": "The display name of the row, based on its identifying column.",
            "example": "Apple"
          },
          "index": {
            "type": "integer",
            "description": "Index of the row within the table.",
            "example": 7
          },
          "browserLink": {
            "type": "string",
            "format": "url",
            "description": "Browser-friendly link to the row.",
            "example": "https://coda.io/d/_dAbCDeFGH#Teams-and-Tasks_tpqRst-U/_rui-tuVwxYz"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp for when the row was created.",
            "example": "2018-04-11T00:18:57.946Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp for when the row was last modified.",
            "example": "2018-04-11T00:18:57.946Z"
          },
          "values": {
            "type": "object",
            "description": "Values for a specific row, represented as a hash of column IDs (or names with `useColumnNames`) to values.\n",
            "additionalProperties": {
              "$ref": "#/components/schemas/CellValue"
            },
            "example": {
              "c-tuVwxYz": "Apple",
              "c-bCdeFgh": ["$12.34", "$56.78"]
            }
          },
          "parent": {
            "$ref": "#/components/schemas/TableReference"
          }
        }
      },
      "RowList": {
        "x-schema-name": "RowList",
        "description": "List of rows.",
        "type": "object",
        "required": ["items"],
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Row"
            }
          },
          "href": {
            "type": "string",
            "format": "url",
            "description": "API link to these results",
            "example": "https://coda.io/apis/v1/docs/AbCDeFGH/tables/grid-pqRst-U/rows?limit=20"
          },
          "nextPageToken": {
            "$ref": "#/components/schemas/nextPageToken"
          },
          "nextPageLink": {
            "allOf": [{
              "$ref": "#/components/schemas/nextPageLink"
            }, {
              "type": "string",
              "example": "https://coda.io/apis/v1/docs/AbCDeFGH/tables/grid-pqRst-U/rows?limit=20&pageToken=20"
            }]
          }
        }
      },
      "ScalarValue": {
        "x-schema-name": "ScalarValue",
        "description": "A Coda result or entity expressed as a primitive type.",
        "oneOf": [{
          "type": "string",
          "example": "$12.34"
        }, {
          "type": "number",
          "example": 12.34
        }, {
          "type": "boolean",
          "example": true
        }]
      },
      "Value": {
        "x-schema-name": "Value",
        "description": "A Coda result or entity expressed as a primitive type, or array of primitive types.",
        "additionalProperties": false,
        "oneOf": [{
          "$ref": "#/components/schemas/ScalarValue"
        }, {
          "type": "array",
          "items": {
            "oneOf": [{
              "$ref": "#/components/schemas/ScalarValue"
            }, {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScalarValue"
              }
            }]
          }
        }]
      },
      "RichSingleValue": {
        "x-schema-name": "RichSingleValue",
        "description": "A value that contains rich structured data. Cell values are composed of these values or arrays of these values.\n",
        "oneOf": [{
          "$ref": "#/components/schemas/ScalarValue"
        }, {
          "$ref": "#/components/schemas/CurrencyValue"
        }, {
          "$ref": "#/components/schemas/ImageUrlValue"
        }, {
          "$ref": "#/components/schemas/PersonValue"
        }, {
          "$ref": "#/components/schemas/UrlValue"
        }, {
          "$ref": "#/components/schemas/RowValue"
        }]
      },
      "RichValue": {
        "x-schema-name": "RichValue",
        "description": "A cell value that contains rich structured data.",
        "oneOf": [{
          "$ref": "#/components/schemas/RichSingleValue"
        }, {
          "type": "array",
          "items": {
            "oneOf": [{
              "$ref": "#/components/schemas/RichSingleValue"
            }, {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RichSingleValue"
              }
            }]
          }
        }]
      },
      "RowValue": {
        "x-schema-name": "RowValue",
        "description": "A value representing a Coda row.",
        "allOf": [{
          "$ref": "#/components/schemas/LinkedDataObject"
        }, {
          "type": "object",
          "additionalProperties": false,
          "required": ["name", "url", "tableId", "tableUrl", "rowId", "additionalType"],
          "properties": {
            "name": {
              "type": "string",
              "description": "The display name of the row, based on its identifying column.",
              "example": "Apple"
            },
            "url": {
              "type": "string",
              "description": "The url of the row.",
              "example": "https://coda.io/d/_dAbCDeFGH#Teams-and-Tasks_tpqRst-U/_rui-tuVwxYz"
            },
            "tableId": {
              "type": "string",
              "description": "The ID of the table",
              "example": "grid-pqRst-U"
            },
            "rowId": {
              "type": "string",
              "description": "The ID of the table",
              "example": "i-tuVwxYz"
            },
            "tableUrl": {
              "type": "string",
              "description": "The url of the table.",
              "example": "https://coda.io/d/_dAbCDeFGH#Teams-and-Tasks_tpqRst-U"
            },
            "additionalType": {
              "type": "string",
              "description": "The type of this resource.",
              "enum": ["row"]
            }
          }
        }]
      },
      "LinkedDataObject": {
        "x-schema-name": "LinkedDataObject",
        "description": "Base type for a JSON-LD (Linked Data) object.",
        "type": "object",
        "additionalProperties": false,
        "required": ["@context", "@type"],
        "properties": {
          "@context": {
            "type": "string",
            "description": "A url describing the schema context for this object, typically \"http://schema.org/\".",
            "example": "http://schema.org/"
          },
          "@type": {
            "$ref": "#/components/schemas/LinkedDataType"
          },
          "additionalType": {
            "type": "string",
            "description": "An identifier of additional type info specific to Coda that may not be present in a schema.org taxonomy,\n"
          }
        }
      },
      "LinkedDataType": {
        "x-schema-name": "LinkedDataType",
        "description": "A schema.org identifier for the object.",
        "type": "string",
        "enum": ["ImageObject", "MonetaryAmount", "Person", "WebPage", "StructuredValue"],
        "x-tsEnumNames": ["ImageObject", "MonetaryAmount", "Person", "WebPage", "StructuredValue"]
      },
      "UrlValue": {
        "x-schema-name": "UrlValue",
        "description": "A named hyperlink to an arbitrary url.",
        "allOf": [{
          "$ref": "#/components/schemas/LinkedDataObject"
        }, {
          "type": "object",
          "additionalProperties": false,
          "required": ["url"],
          "properties": {
            "name": {
              "type": "string",
              "description": "The user-visible text of the hyperlink.",
              "example": "Click me"
            },
            "url": {
              "type": "string",
              "description": "The url of the hyperlink.",
              "example": "https://coda.io"
            }
          }
        }]
      },
      "ImageUrlValue": {
        "x-schema-name": "ImageUrlValue",
        "description": "A named url of an image along with metadata.",
        "allOf": [{
          "$ref": "#/components/schemas/LinkedDataObject"
        }, {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the image.",
              "example": "Dogs Playing Poker"
            },
            "url": {
              "type": "string",
              "description": "The url of the image.",
              "example": "https://example.com/dogs-playing-poker.jpg"
            },
            "height": {
              "type": "number",
              "description": "The height of the image in pixels.",
              "example": 480
            },
            "width": {
              "type": "number",
              "description": "The width of the image in pixels.",
              "example": 640
            },
            "status": {
              "$ref": "#/components/schemas/ImageStatus"
            }
          }
        }]
      },
      "ImageStatus": {
        "x-schema-name": "ImageStatus",
        "description": "The status values that an image object can have.",
        "type": "string",
        "enum": ["live", "deleted", "failed"],
        "x-tsEnumNames": ["Live", "Deleted", "Failed"]
      },
      "PersonValue": {
        "x-schema-name": "PersonValue",
        "description": "A named reference to a person, where the person is identified by email address.",
        "allOf": [{
          "$ref": "#/components/schemas/LinkedDataObject"
        }, {
          "type": "object",
          "additionalProperties": false,
          "required": ["name", "email"],
          "properties": {
            "name": {
              "type": "string",
              "description": "The full name of the person.",
              "example": "Alice Atkins"
            },
            "email": {
              "type": "string",
              "description": "The email address of the person.",
              "example": "alice@atkins.com"
            }
          }
        }]
      },
      "CurrencyAmount": {
        "x-schema-name": "CurrencyAmount",
        "description": "A numeric monetary amount as a string or number.",
        "oneOf": [{
          "type": "string",
          "example": "12.99"
        }, {
          "type": "number",
          "example": 42
        }]
      },
      "CurrencyValue": {
        "x-schema-name": "CurrencyValue",
        "description": "A monetary value with its associated currency code.",
        "allOf": [{
          "$ref": "#/components/schemas/LinkedDataObject"
        }, {
          "type": "object",
          "additionalProperties": false,
          "required": ["currency", "amount"],
          "properties": {
            "currency": {
              "type": "string",
              "description": "The 3-letter currency code.",
              "example": "USD"
            },
            "amount": {
              "$ref": "#/components/schemas/CurrencyAmount"
            }
          }
        }]
      },
      "CellValue": {
        "x-schema-name": "CellValue",
        "description": "All values that a row cell can contain.",
        "oneOf": [{
          "$ref": "#/components/schemas/Value"
        }, {
          "$ref": "#/components/schemas/RichValue"
        }]
      },
      "CellEdit": {
        "x-schema-name": "CellEdit",
        "description": "An edit made to a particular cell in a row.",
        "type": "object",
        "required": ["column", "value"],
        "additionalProperties": false,
        "properties": {
          "column": {
            "type": "string",
            "description": "Column ID, URL, or name (fragile and discouraged) associated with this edit.",
            "example": "c-tuVwxYz"
          },
          "value": {
            "$ref": "#/components/schemas/Value"
          }
        }
      },
      "PushButtonResult": {
        "x-schema-name": "PushButtonResult",
        "description": "The result of a push button.",
        "allOf": [{
          "$ref": "#/components/schemas/DocumentMutateResponse"
        }, {
          "type": "object",
          "required": ["rowId", "columnId"],
          "additionalProperties": false,
          "properties": {
            "rowId": {
              "type": "string",
              "description": "ID of the row where the button exists.",
              "example": "i-tuVwxYz"
            },
            "columnId": {
              "type": "string",
              "description": "ID of the column where the button exists.",
              "example": "i-tuVwxYz"
            }
          }
        }]
      },
      "RowEdit": {
        "x-schema-name": "RowEdit",
        "description": "An edit made to a particular row.",
        "type": "object",
        "required": ["cells"],
        "additionalProperties": false,
        "properties": {
          "cells": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CellEdit"
            }
          }
        }
      },
      "RowUpdate": {
        "x-schema-name": "RowUpdate",
        "description": "Payload for updating a row in a table.",
        "type": "object",
        "required": ["row"],
        "additionalProperties": false,
        "properties": {
          "row": {
            "$ref": "#/components/schemas/RowEdit"
          }
        }
      },
      "RowUpdateResult": {
        "x-schema-name": "RowUpdateResult",
        "description": "The result of a row update.",
        "allOf": [{
          "$ref": "#/components/schemas/DocumentMutateResponse"
        }, {
          "type": "object",
          "required": ["id"],
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "string",
              "description": "ID of the updated row.",
              "example": "i-tuVwxYz"
            }
          }
        }]
      },
      "RowsDelete": {
        "x-schema-name": "RowsDelete",
        "description": "Payload for deleting rows from a table.",
        "type": "object",
        "required": ["rowIds"],
        "additionalProperties": false,
        "properties": {
          "rowIds": {
            "description": "Row IDs to delete.\n",
            "example": ["i-bCdeFgh", "i-CdEfgHi"],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RowsDeleteResult": {
        "x-schema-name": "RowsDeleteResult",
        "description": "The result of a rows delete operation.",
        "allOf": [{
          "$ref": "#/components/schemas/DocumentMutateResponse"
        }, {
          "type": "object",
          "required": ["rowIds"],
          "additionalProperties": false,
          "properties": {
            "rowIds": {
              "description": "Row IDs to delete.",
              "example": ["i-bCdeFgh", "i-CdEfgHi"],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }]
      },
      "RowsUpsert": {
        "x-schema-name": "RowsUpsert",
        "description": "Payload for upserting rows in a table.",
        "type": "object",
        "required": ["rows"],
        "additionalProperties": false,
        "properties": {
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RowEdit"
            }
          },
          "keyColumns": {
            "description": "Optional column IDs, URLs, or names (fragile and discouraged), specifying columns to be used as upsert keys.\n",
            "example": ["c-bCdeFgh"],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RowsUpsertResult": {
        "x-schema-name": "RowsUpsertResult",
        "description": "The result of a rows insert/upsert operation.",
        "allOf": [{
          "$ref": "#/components/schemas/DocumentMutateResponse"
        }]
      },
      "RowDeleteResult": {
        "x-schema-name": "RowDeleteResult",
        "description": "The result of a row deletion.",
        "allOf": [{
          "$ref": "#/components/schemas/DocumentMutateResponse"
        }, {
          "type": "object",
          "required": ["id"],
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "string",
              "description": "ID of the row to be deleted.",
              "example": "i-tuVwxYz"
            }
          }
        }]
      },
      "RowsSortBy": {
        "x-schema-name": "RowsSortBy",
        "description": "Determines how the rows returned are sorted",
        "type": "string",
        "enum": ["createdAt", "natural"],
        "x-tsEnumNames": ["CreatedAt", "Natural"]
      },
      "ValueFormat": {
        "x-schema-name": "ValueFormat",
        "description": "The format that cell values are returned as.",
        "type": "string",
        "enum": ["simple", "simpleWithArrays", "rich"],
        "x-tsEnumNames": ["Simple", "SimpleWithArrays", "Rich"]
      },
      "FormulaReference": {
        "x-schema-name": "FormulaReference",
        "description": "Reference to a formula.",
        "type": "object",
        "required": ["id", "type", "href", "name"],
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the formula.",
            "example": "f-fgHijkLm"
          },
          "type": {
            "type": "string",
            "description": "The type of this resource.",
            "enum": ["formula"]
          },
          "href": {
            "type": "string",
            "format": "url",
            "description": "API link to the formula.",
            "example": "https://coda.io/apis/v1/docs/AbCDeFGH/formulas/f-fgHijkLm"
          },
          "name": {
            "type": "string",
            "description": "Name of the formula.",
            "example": "Sum of expenses"
          },
          "parent": {
            "$ref": "#/components/schemas/PageReference"
          }
        }
      },
      "Formula": {
        "x-schema-name": "Formula",
        "description": "Details about a formula.",
        "type": "object",
        "required": ["id", "type", "href", "name", "value"],
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the formula.",
            "example": "f-fgHijkLm"
          },
          "type": {
            "type": "string",
            "description": "The type of this resource.",
            "enum": ["formula"]
          },
          "href": {
            "type": "string",
            "format": "url",
            "description": "API link to the formula.",
            "example": "https://coda.io/apis/v1/docs/AbCDeFGH/formulas/f-fgHijkLm"
          },
          "name": {
            "type": "string",
            "description": "Name of the formula.",
            "example": "Sum of expenses"
          },
          "parent": {
            "$ref": "#/components/schemas/PageReference"
          },
          "value": {
            "$ref": "#/components/schemas/Value"
          }
        }
      },
      "FormulaList": {
        "x-schema-name": "FormulaList",
        "description": "List of formulas.",
        "type": "object",
        "required": ["items"],
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormulaReference"
            }
          },
          "href": {
            "type": "string",
            "format": "url",
            "description": "API link to these results",
            "example": "https://coda.io/apis/v1/docs/AbCDeFGH/formulas?limit=20"
          },
          "nextPageToken": {
            "$ref": "#/components/schemas/nextPageToken"
          },
          "nextPageLink": {
            "allOf": [{
              "$ref": "#/components/schemas/nextPageLink"
            }, {
              "type": "string",
              "example": "https://coda.io/apis/v1/docs/AbCDeFGH/formulas?limit=20&pageToken=20"
            }]
          }
        }
      },
      "ControlReference": {
        "x-schema-name": "ControlReference",
        "description": "Reference to a control.",
        "type": "object",
        "required": ["id", "type", "href", "name"],
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the control.",
            "example": "ctrl-cDefGhij"
          },
          "type": {
            "type": "string",
            "description": "The type of this resource.",
            "enum": ["control"]
          },
          "href": {
            "type": "string",
            "format": "url",
            "description": "API link to the control.",
            "example": "https://coda.io/apis/v1/docs/AbCDeFGH/controls/ctrl-cDefGhij"
          },
          "name": {
            "type": "string",
            "description": "Name of the control.",
            "example": "Cost"
          },
          "parent": {
            "$ref": "#/components/schemas/PageReference"
          }
        }
      },
      "Control": {
        "x-schema-name": "Control",
        "description": "Details about a control.",
        "type": "object",
        "required": ["id", "type", "href", "name", "controlType", "value"],
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the control.",
            "example": "ctrl-cDefGhij"
          },
          "type": {
            "type": "string",
            "description": "The type of this resource.",
            "enum": ["control"]
          },
          "href": {
            "type": "string",
            "format": "url",
            "description": "API link to the control.",
            "example": "https://coda.io/apis/v1/docs/AbCDeFGH/controls/ctrl-cDefGhij"
          },
          "name": {
            "type": "string",
            "description": "Name of the control.",
            "example": "Cost"
          },
          "parent": {
            "$ref": "#/components/schemas/PageReference"
          },
          "controlType": {
            "$ref": "#/components/schemas/ControlType"
          },
          "value": {
            "$ref": "#/components/schemas/Value"
          }
        }
      },
      "ControlList": {
        "x-schema-name": "ControlList",
        "description": "List of controls.",
        "type": "object",
        "required": ["items"],
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ControlReference"
            }
          },
          "href": {
            "type": "string",
            "format": "url",
            "description": "API link to these results",
            "example": "https://coda.io/apis/v1/docs/AbCDeFGH/controls?limit=20"
          },
          "nextPageToken": {
            "$ref": "#/components/schemas/nextPageToken"
          },
          "nextPageLink": {
            "allOf": [{
              "$ref": "#/components/schemas/nextPageLink"
            }, {
              "type": "string",
              "example": "https://coda.io/apis/v1/docs/AbCDeFGH/controls?limit=20&pageToken=20"
            }]
          }
        }
      },
      "ControlType": {
        "x-schema-name": "ControlType",
        "description": "Type of the control.",
        "type": "string",
        "example": "slider",
        "enum": ["button", "checkbox", "datePicker", "dateRangePicker", "multiselect", "select", "scale", "slider"],
        "x-tsEnumNames": ["Button", "Checkbox", "DatePicker", "DateRangePicker", "Multiselect", "Select", "Scale", "Slider"]
      },
      "User": {
        "x-schema-name": "User",
        "description": "Info about the user.",
        "type": "object",
        "required": ["name", "loginId", "type", "scoped", "tokenName", "href"],
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the user.",
            "example": "John Doe"
          },
          "loginId": {
            "type": "string",
            "description": "Email address of the user.",
            "example": "user@example.com"
          },
          "type": {
            "type": "string",
            "description": "The type of this resource.",
            "enum": ["user"]
          },
          "scoped": {
            "type": "boolean",
            "description": "True if the token used to make this request has restricted/scoped access to the API.",
            "example": false
          },
          "tokenName": {
            "type": "string",
            "description": "Returns the name of the token used for this request.",
            "example": "My API token"
          },
          "href": {
            "type": "string",
            "format": "url",
            "description": "API link to the user.",
            "example": "https://coda.io/apis/v1beta/whoami"
          },
          "pictureLink": {
            "type": "string",
            "format": "url",
            "description": "Browser-friendly link to the user's avatar image.",
            "example": "https://cdn.coda.io/avatars/default_avatar.png"
          }
        }
      },
      "nextPageToken": {
        "description": "If specified, an opaque token used to fetch the next page of results.",
        "type": "string",
        "example": "20"
      },
      "nextPageLink": {
        "description": "If specified, a link that can be used to fetch the next page of results.",
        "type": "string",
        "format": "url"
      },
      "ApiLink": {
        "x-schema-name": "ApiLink",
        "description": "Info about a resolved link to an API resource.",
        "type": "object",
        "required": ["type", "href", "resource"],
        "additionalProperties": false,
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of this resource.",
            "enum": ["apiLink"]
          },
          "href": {
            "type": "string",
            "format": "url",
            "description": "Self link to this query.",
            "example": "https://coda.io/apis/v1/resolveBrowserLink?url=https%3A%2F%2Fcoda.io%2Fd%2F_dAbCDeFGH%2FLaunch-Status_sumnO"
          },
          "browserLink": {
            "type": "string",
            "format": "url",
            "description": "Canonical browser-friendly link to the resolved resource.",
            "example": "https://coda.io/d/_dAbCDeFGH/Launch-Status_sumnO"
          },
          "resource": {
            "$ref": "#/components/schemas/ApiLinkResolvedResource"
          }
        }
      },
      "ApiLinkResolvedResource": {
        "x-schema-name": "ApiLinkResolvedResource",
        "type": "object",
        "description": "Reference to the resolved resource.",
        "required": ["id", "href", "type"],
        "additionalProperties": false,
        "properties": {
          "type": {
            "$ref": "#/components/schemas/Type"
          },
          "id": {
            "type": "string",
            "description": "ID of the resolved resource.",
            "example": "canvas-IjkLmnO"
          },
          "name": {
            "type": "string",
            "description": "Name of the resource.",
            "example": "My Page"
          },
          "href": {
            "type": "string",
            "format": "url",
            "description": "API link to the resolved resource that can be queried to get further information.",
            "example": "https://coda.io/apis/v1/docs/AbCDeFGH/pages/canvas-IjkLmnO"
          }
        }
      },
      "Icon": {
        "x-schema-name": "icon",
        "description": "Info about the icon.",
        "type": "object",
        "required": ["name", "type", "browserLink"],
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the icon."
          },
          "type": {
            "type": "string",
            "description": "MIME type of the icon"
          },
          "browserLink": {
            "type": "string",
            "format": "url",
            "description": "Browser-friendly link to an icon.",
            "example": "https://cdn.coda.io/icons/png/color/icon-32.png"
          }
        }
      },
      "Image": {
        "x-schema-name": "Image",
        "description": "Info about the image.",
        "type": "object",
        "required": ["browserLink"],
        "additionalProperties": false,
        "properties": {
          "browserLink": {
            "type": "string",
            "format": "url",
            "description": "Browser-friendly link to an image.",
            "example": "https://coda.io/contentProxy/nUYhlXysYO/blobs/bl-lYkYKNzkuT/3f879b9ecfa27448"
          },
          "type": {
            "type": "string",
            "description": "MIME type of the image."
          },
          "width": {
            "type": "number",
            "description": "The width in pixels of the image.",
            "example": 800
          },
          "height": {
            "type": "number",
            "description": "The height in pixels of the image.",
            "example": 600
          }
        }
      },
      "SortBy": {
        "x-schema-name": "SortBy",
        "description": "Determines how the objects returned are sorted",
        "type": "string",
        "enum": ["name"],
        "x-tsEnumNames": ["Name"]
      },
      "TableType": {
        "x-schema-name": "TableType",
        "type": "string",
        "enum": ["table", "view"],
        "x-tsEnumNames": ["Table", "View"]
      },
      "FormulaDetail": {
        "x-schema-name": "FormulaDetail",
        "description": "Detailed information about a formula.",
        "type": "object",
        "required": ["valid"],
        "additionalProperties": false,
        "properties": {
          "valid": {
            "type": "boolean",
            "description": "Returns whether or not the given formula is valid.",
            "example": true
          },
          "isVolatile": {
            "type": "boolean",
            "description": "Returns whether or not the given formula can return different results in different contexts (for example, for different users).\n",
            "example": false
          },
          "hasUserFormula": {
            "type": "boolean",
            "description": "Returns whether or not the given formula has a User() formula within it.",
            "example": false
          },
          "hasTodayFormula": {
            "type": "boolean",
            "description": "Returns whether or not the given formula has a Today() formula within it.",
            "example": false
          },
          "hasNowFormula": {
            "type": "boolean",
            "description": "Returns whether or not the given formula has a Now() formula within it.",
            "example": false
          }
        }
      },
      "MutationStatus": {
        "x-schema-name": "MutationStatus",
        "description": "The status of an asynchronous mutation.",
        "type": "object",
        "required": ["completed"],
        "additionalProperties": false,
        "properties": {
          "completed": {
            "type": "boolean",
            "description": "Returns whether the mutation has completed.",
            "example": true
          }
        }
      }
    },
    "parameters": {
      "limit": {
        "name": "limit",
        "description": "Maximum number of results to return in this query.",
        "in": "query",
        "example": 10,
        "schema": {
          "type": "integer"
        }
      },
      "pageToken": {
        "name": "pageToken",
        "description": "An opaque token used to fetch the next page of results.",
        "in": "query",
        "example": 20,
        "schema": {
          "type": "string"
        }
      },
      "docId": {
        "name": "docId",
        "description": "ID of the doc.",
        "in": "path",
        "required": true,
        "example": "AbCDeFGH",
        "schema": {
          "type": "string"
        }
      },
      "permissionId": {
        "name": "permissionId",
        "description": "ID of a permission on a doc.",
        "in": "path",
        "required": true,
        "example": "AbCDeFGH",
        "schema": {
          "type": "string"
        }
      },
      "pageIdOrName": {
        "name": "pageIdOrName",
        "description": "ID or name of the page. Names are discouraged because they're easily prone to being changed by users. If you're using a name, be sure to URI-encode it. If you provide a name and there are multiple pages with the same name, an arbitrary one will be selected.\n",
        "x-sdk-description": "ID or name of the page. Names are discouraged because they're easily prone to being changed by users. Note that if you're using a name and there are multiple pages with the same name, an arbitrary one will be returned.\n",
        "in": "path",
        "required": true,
        "example": "canvas-IjkLmnO",
        "schema": {
          "type": "string"
        }
      },
      "tableIdOrName": {
        "name": "tableIdOrName",
        "description": "ID or name of the table. Names are discouraged because they're easily prone to being changed by users. If you're using a name, be sure to URI-encode it.",
        "x-sdk-description": "ID or name of the table. Names are discouraged because they're easily prone to being changed by users.",
        "in": "path",
        "required": true,
        "example": "grid-pqRst-U",
        "schema": {
          "type": "string"
        }
      },
      "viewIdOrName": {
        "name": "viewIdOrName",
        "description": "ID or name of the view. Names are discouraged because they're easily prone to being changed by users. If you're using a name, be sure to URI-encode it.",
        "x-sdk-description": "ID or name of the view. Names are discouraged because they're easily prone to being changed by users.",
        "in": "path",
        "required": true,
        "example": "table-pqRst-U",
        "schema": {
          "type": "string"
        }
      },
      "columnIdOrName": {
        "name": "columnIdOrName",
        "description": "ID or name of the column. Names are discouraged because they're easily prone to being changed by users. If you're using a name, be sure to URI-encode it.",
        "x-sdk-description": "ID or name of the column. Names are discouraged because they're easily prone to being changed by users.",
        "in": "path",
        "required": true,
        "example": "c-tuVwxYz",
        "schema": {
          "type": "string"
        }
      },
      "rowIdOrName": {
        "name": "rowIdOrName",
        "description": "ID or name of the row. Names are discouraged because they're easily prone to being changed by users. If you're using a name, be sure to URI-encode it. If there are multiple rows with the same value in the identifying column, an arbitrary one will be selected.\n",
        "x-sdk-description": "ID or name of the row. Names are discouraged because they're easily prone to being changed by users. Note that if there are multiple rows with the same value in the identifying column, an arbitrary one will be returned.\n",
        "in": "path",
        "required": true,
        "example": "i-tuVwxYz",
        "schema": {
          "type": "string"
        }
      },
      "formulaIdOrName": {
        "name": "formulaIdOrName",
        "description": "ID or name of the formula. Names are discouraged because they're easily prone to being changed by users. If you're using a name, be sure to URI-encode it.",
        "x-sdk-description": "ID or name of the formula. Names are discouraged because they're easily prone to being changed by users.",
        "in": "path",
        "required": true,
        "example": "f-fgHijkLm",
        "schema": {
          "type": "string"
        }
      },
      "controlIdOrName": {
        "name": "controlIdOrName",
        "description": "ID or name of the control. Names are discouraged because they're easily prone to being changed by users. If you're using a name, be sure to URI-encode it.",
        "x-sdk-description": "ID or name of the control. Names are discouraged because they're easily prone to being changed by users.",
        "in": "path",
        "required": true,
        "example": "ctrl-cDefGhij",
        "schema": {
          "type": "string"
        }
      },
      "useColumnNames": {
        "name": "useColumnNames",
        "description": "Use column names instead of column IDs in the returned output. This is generally discouraged as it is fragile. If columns are renamed, code using original names may throw errors.\n",
        "in": "query",
        "example": true,
        "schema": {
          "type": "boolean"
        }
      },
      "sortBy": {
        "name": "sortBy",
        "description": "Determines how to sort the given objects.",
        "in": "query",
        "example": "name",
        "schema": {
          "$ref": "#/components/schemas/SortBy"
        }
      },
      "requestId": {
        "name": "requestId",
        "description": "ID of the request.",
        "in": "path",
        "required": true,
        "example": "abc-123-def-456",
        "schema": {
          "type": "string"
        }
      },
      "tableTypes": {
        "name": "tableTypes",
        "description": "Comma-separated list of table types to include in results. If omitted, includes both tables and views.",
        "in": "query",
        "explode": false,
        "example": "table,view",
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/TableType"
          }
        }
      }
    },
    "responses": {
      "BadRequestError": {
        "description": "The request parameters did not conform to expectations.",
        "content": {
          "application/json": {
            "schema": {
              "description": "An HTTP error resulting from an unsuccessful request.",
              "required": ["statusCode", "statusMessage", "message"],
              "additionalProperties": false,
              "properties": {
                "statusCode": {
                  "type": "number",
                  "description": "HTTP status code of the error.",
                  "example": 400
                },
                "statusMessage": {
                  "type": "string",
                  "description": "HTTP status message of the error.",
                  "example": "Bad Request"
                },
                "message": {
                  "type": "string",
                  "description": "Any additional context on the error, or the same as `statusMessage` otherwise.",
                  "example": "Bad Request"
                }
              }
            }
          }
        }
      },
      "UnauthorizedError": {
        "description": "The API token is invalid or has expired.",
        "content": {
          "application/json": {
            "schema": {
              "description": "An HTTP error resulting from an unsuccessful request.",
              "required": ["statusCode", "statusMessage", "message"],
              "additionalProperties": false,
              "properties": {
                "statusCode": {
                  "type": "number",
                  "description": "HTTP status code of the error.",
                  "example": 401
                },
                "statusMessage": {
                  "type": "string",
                  "description": "HTTP status message of the error.",
                  "example": "Unauthorized"
                },
                "message": {
                  "type": "string",
                  "description": "Any additional context on the error, or the same as `statusMessage` otherwise.",
                  "example": "Unauthorized"
                }
              }
            }
          }
        }
      },
      "ForbiddenError": {
        "description": "The API token does not grant access to this resource.",
        "content": {
          "application/json": {
            "schema": {
              "description": "An HTTP error resulting from an unsuccessful request.",
              "required": ["statusCode", "statusMessage", "message"],
              "additionalProperties": false,
              "properties": {
                "statusCode": {
                  "type": "number",
                  "description": "HTTP status code of the error.",
                  "example": 403
                },
                "statusMessage": {
                  "type": "string",
                  "description": "HTTP status message of the error.",
                  "example": "Forbidden"
                },
                "message": {
                  "type": "string",
                  "description": "Any additional context on the error, or the same as `statusMessage` otherwise.",
                  "example": "Forbidden"
                }
              }
            }
          }
        }
      },
      "NotFoundError": {
        "description": "The resource could not be located with the current API token.",
        "content": {
          "application/json": {
            "schema": {
              "description": "An HTTP error resulting from an unsuccessful request.",
              "required": ["statusCode", "statusMessage", "message"],
              "additionalProperties": false,
              "properties": {
                "statusCode": {
                  "type": "number",
                  "description": "HTTP status code of the error.",
                  "example": 404
                },
                "statusMessage": {
                  "type": "string",
                  "description": "HTTP status message of the error.",
                  "example": "Not Found"
                },
                "message": {
                  "type": "string",
                  "description": "Any additional context on the error, or the same as `statusMessage` otherwise.",
                  "example": "Not Found"
                }
              }
            }
          }
        }
      },
      "GoneError": {
        "description": "The resource has been deleted.",
        "content": {
          "application/json": {
            "schema": {
              "description": "An HTTP error resulting from an unsuccessful request.",
              "required": ["statusCode", "statusMessage", "message"],
              "additionalProperties": false,
              "properties": {
                "statusCode": {
                  "type": "number",
                  "description": "HTTP status code of the error.",
                  "example": 410
                },
                "statusMessage": {
                  "type": "string",
                  "description": "HTTP status message of the error.",
                  "example": "Gone"
                },
                "message": {
                  "type": "string",
                  "description": "Any additional context on the error, or the same as `statusMessage` otherwise.",
                  "example": "Gone"
                }
              }
            }
          }
        }
      },
      "TooManyRequestsError": {
        "description": "The client has sent too many requests.",
        "content": {
          "application/json": {
            "schema": {
              "description": "An HTTP error resulting from an unsuccessful request.",
              "required": ["statusCode", "statusMessage", "message"],
              "additionalProperties": false,
              "properties": {
                "statusCode": {
                  "type": "number",
                  "description": "HTTP status code of the error.",
                  "example": 429
                },
                "statusMessage": {
                  "type": "string",
                  "description": "HTTP status message of the error.",
                  "example": "Too Many Requests"
                },
                "message": {
                  "type": "string",
                  "description": "Any additional context on the error, or the same as `statusMessage` otherwise.",
                  "example": "Too Many Requests"
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "description": "The Coda API can be accessed using an API token, which can be obtained from [*My account*](https://coda.io/account)\nin Coda. This token should be specified by setting a header as follows.\n\n```Authorization: Bearer <api_token>```\n\nKeep your token safe, as anyone who gets access to it can access your account. Once a token is created\nit cannot be viewed or modified, so don't lose it.\n\nIf you're logged into Coda, you can also query the API directly using your browser. Note that only GET\nendpoints are supported; for anything else, you'll have to use Bearer authentication.\n\n### Restricting token authorization\n\nBy default, bearer tokens created for the Coda API can perform any action that the user who created the token\ncan perform. However, Coda API bearer tokens can also be created with restrictions. These restrictions\ncan limit what objects can be operated on and the types of operations that can be performed.\n\n#### Operation types\n\nThe table below describes the types of authorization restrictions that can be placed on a Coda API token.\n<table>\n  <tr><th>Restriction</th><th>Description</th><th>Allowed HTTP Methods</th></tr>\n  <tr>\n    <td>Read access</td>\n    <td>Allows access to API methods that read the state of an object</td>\n    <td>GET</td>\n  </tr>\n  <tr>\n    <td>Write access</td>\n    <td>Allows access to API methods that write the state of an object</td>\n    <td>POST, PUT, DELETE</td>\n  </tr>\n  <tr>\n    <td>Read and write access</td>\n    <td>Allows access to all methods for an object</td>\n    <td>All</td>\n  </tr>\n</table>\n\n#### Object types\n\nCoda API tokens can be restricted to the following types of objects.\n\n* Documents: Restricts access to only allow API calls for `/docs/${DOC_ID}`\n* Tables: Restricts access to only allow API calls for `/docs/${DOC_ID}/tables/${TABLE_ID}`\n\n#### Special cases\n\nThere are a few special case methods that violate the above restrictions.\n\n* `/whoami`: This method can be called by all Coda API tokens.\n* `/resolveBrowserLink`: This method can be called by all Coda API tokens, but will only return a result\nif the token has read access to the object referenced by the URL.\n\n#### Feedback\n\nThis feature is under development and we'd love to hear your feedback and bug reports. Please\nvisit us at the [Developers Central](https://community.coda.io/c/developers-central) forum within\nthe Coda Community.\n",
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "UUID"
      }
    }
  },
  "security": [{
    "Bearer": []
  }]
}
